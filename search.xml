<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>道钉网关厂测程序开发日志</title>
      <link href="/2023/08/14/dao-ding-wang-guan-han-ce-cheng-xu-kai-fa-ri-zhi/"/>
      <url>/2023/08/14/dao-ding-wang-guan-han-ce-cheng-xu-kai-fa-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>针对旧版道钉网关（V1.2）开发的厂测程序，主要功能是出厂时检测产品各个功能模块是否正常运行，并通过上位机打印测试信息、手动确认部分需要人工确认的功能模块、记录信息或直接连接打印机，打印标签；</p><h1 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h1><h2 id="嵌软部分"><a href="#嵌软部分" class="headerlink" title="嵌软部分"></a>嵌软部分</h2><h3 id="进入厂测"><a href="#进入厂测" class="headerlink" title="进入厂测"></a>进入厂测</h3><p>硬件上电后，通过串口指令，或引脚电压，进入厂测模式。</p><h3 id="厂测功能"><a href="#厂测功能" class="headerlink" title="厂测功能"></a>厂测功能</h3><ol><li><p>程序自动确认部分  </p><ol><li>SW</li><li>LED</li><li>亮度</li><li>电池电压</li></ol></li><li><p>人工确认部分</p><ol><li>RS485</li><li>Flash</li><li>LORA(1&#x2F;2)</li><li>CAT-1</li><li>ETH</li><li>ATGM332D-5N<br> 简介：<blockquote><p> <a href="https://www.icofchina.com/d/file/xiazai/2019-05-17/c21c5d3c1998ecab022b34809347f817.pdf" title="模块说明书">ATGM332D-5N 系列模块是 12X16 尺寸的高性能 BDS&#x2F;GNSS 全星座定位导<br> 航模块系列的总称。该系列模块产品都是基于中科微第四代低功耗 GNSS SOC<br> 单芯片—AT6558，支持多种卫星导航系统，包括中国的 BDS（北斗卫星导航系<br> 统），美国的 GPS，俄罗斯的 GLONASS，欧盟的 GALILEO，日本的 QZSS 以<br> 及卫星增强系统 SBAS（WAAS，EGNOS，GAGAN，MSAS）。AT6558 是一款<br> 真正意义的六合一多模卫星导航定位芯片，包含 32 个跟踪通道，可以同时接收<br> 六个卫星导航系统的 GNSS 信号，并且实现联合定位、导航与授时.</a></p></blockquote></li></ol><p> 连接： ATGM332D-5N(后文中称GPS模块)在道钉V1.2PCB中，通过USART2与MCU进行连接，但是根据原理图可以看出来，MCU仅USART2 RX引脚（PA3）与GPS模块连接，未使用TX功能。此外，还使用PA3（output）作为GPS_EN引脚，PA1(input)作为GPS_1PPS输入引脚。  </p><p> 开发：<br> USART2 – uart driver  （open&#x2F;read&#x2F;write&#x2F;io_ctrl_close）<br> ATGM332D   – ATGM332D driver    （open&#x2F;read&#x2F;write&#x2F;io_ctrl&#x2F;close)<br> GPS – (info struct)</p></li></ol><h3 id="退出厂测"><a href="#退出厂测" class="headerlink" title="退出厂测"></a>退出厂测</h3><h2 id="上位机部分"><a href="#上位机部分" class="headerlink" title="上位机部分"></a>上位机部分</h2><p>上位机部分拟用QT开发</p><h3 id="信息输出"><a href="#信息输出" class="headerlink" title="信息输出"></a>信息输出</h3><h3 id="功能确认"><a href="#功能确认" class="headerlink" title="功能确认"></a>功能确认</h3><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><h3 id="标签制作"><a href="#标签制作" class="headerlink" title="标签制作"></a>标签制作</h3><h3 id="标签打印"><a href="#标签打印" class="headerlink" title="标签打印"></a>标签打印</h3>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LORA </tag>
            
            <tag> GPS </tag>
            
            <tag> CAT-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成都安可信</title>
      <link href="/2023/08/03/cheng-du-an-ke-xin/"/>
      <url>/2023/08/03/cheng-du-an-ke-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="http://action98.com/index.html#home">成都安可信电子股份有限公司</a><br>四川省成都市双流西南航空港经济开发区物联网产业园区物联西街88号<br>行业 ：气体监测 （工业&#x2F;市政&#x2F;民用）<br>招聘公告：  </p><blockquote><p>单片机软件开发工程师 15-22K·15薪 成都 3-5年 本科<br>职位描述：<br>CSTM32开发<br>ARM开发  </p></blockquote><ol><li>完成项目需求分解、系统设计报告编写、详细设计报告编写。 </li><li>完成软件代码编写和软硬件联调测试。</li><li>独立完成软件模块测试用例的设计和编写，并完成单元测试。 </li><li>软件模块化开发和规划整理。</li><li>重点技术预研提升。</li><li>负责项目流程中软件相关文件编制，如产品使用说明书、程序下载说明等。  <blockquote><p>任职资格：  </p></blockquote></li><li>本科或以上学历，电子信息工程、通信、计算机等相关专业。3年以上工作经验。</li><li>熟练掌握嵌入式软件C、C++编程，拥有嵌入式实时操作系统的移植和开发经验，例如uc&#x2F;os-ii、FreeRTOS等</li><li>具备独立完成软件功能模块设计和编写的能力。</li><li>拥有电子电路硬件基础，协助硬件工程师完成原理图设计。 </li><li>具备常用物联网模块开发经验，如NB-ioT、4G、蓝牙、WiFi、LORA等。</li></ol><h1 id="面试流程"><a href="#面试流程" class="headerlink" title="面试流程"></a>面试流程</h1><h2 id="简历投递"><a href="#简历投递" class="headerlink" title="简历投递"></a>简历投递</h2><pre><code class="hljs">2023.08.02 投递简历</code></pre><h2 id="电话沟通"><a href="#电话沟通" class="headerlink" title="电话沟通"></a>电话沟通</h2><pre><code class="hljs">2023.08.03 电话沟通</code></pre><h3 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h3><ol><li>九通<br>主要工作？是单片机开发吗？</li><li>四川益丰<br>主要工作</li><li>期望薪酬？<br>20~25K</li><li>目前薪酬？<br>基本+绩效 15k 不含项目奖金</li><li>离职原因？<br>现在主要做应用方向，想换个方向做偏底层的开发（感觉回答得不是很满意）</li></ol><h3 id="邀请去公司面试"><a href="#邀请去公司面试" class="headerlink" title="邀请去公司面试"></a>邀请去公司面试</h3><ol><li>约面试时间<br>未确定</li><li>面试流程<br>HR初面<br>技术主管二面</li></ol>]]></content>
      
      
      <categories>
          
          <category> 求职 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超声波风速风向测量仪的设计与实践</title>
      <link href="/2023/06/15/ultrasonic-anemometer-design-and-practice/"/>
      <url>/2023/06/15/ultrasonic-anemometer-design-and-practice/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>超声波风速风向测量仪是青站中最有趣的传感器之一。然而，对于我来说也是一个非常具有挑战性的任务，因为我在模拟电路设计方面几乎没有经验，而风速风向测量仪需要同时涉及模拟放大和大量的数据处理（起初我甚至不知道如何使用运放）。</p><p><a href="https://www.dl1glh.de/ultrasonic-anemometer.html#advancement">Anemometer by Hardy Lau</a>是一篇我学习了一次又一次的博客。这篇博客非常详细，并已经涵盖了构建自己的超声波风速风向测量仪所需的大部分知识。</p><p>工作原理简述：当超声波波（脉冲）在流动介质（空气）中传播时，波到达目标的时间会有所不同。正向和反向传播之间的时间差反映了介质流动的速度，即风速。通过在垂直方向上使用两对传感器，可以使用简单的三角法计算出风向。</p><p>与其他类型的风速风向传感器相比，超声波风速风向测量仪具有以下优势：</p><ul><li>超声波风速风向测量仪的体积小于旋转式传感器（如杯式风速风向计）。</li><li>DIY（自己动手制作）的难度适中，成本较低，而且Hardy的博客提供了很好的指导。</li><li>它没有移动部件！移动部件不太容易DIY，特别是在防水方面。</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="基础原理"><a href="#基础原理" class="headerlink" title="基础原理"></a>基础原理</h2><p><img src="ultrasonic_anemometer_principle.png" alt="ultrasonic_anemometer_principle"></p><p>原理非常简单，声波在介质（空气）中的传播受到介质运动的影响。通过已知的传播路径和传播时间，我们可以计算介质的速度。</p><p>在上面的图中，我们可以看到风的运动BC与声波传播AB相加，形成了传播路径AC。</p><p><a href="https://www.dl1glh.de/ultrasonic-anemometer.html#advancement">Lau</a><br>在其发布的所有相关方程式中提供了详细说明（使用了不同的符号表示）。 </p><p>In C language:</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs processing"><span class="hljs-built_in">alpha</span> = <span class="hljs-built_in">atan</span>(<span class="hljs-number">2</span>*H/D);<br>v = H/<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">alpha</span>)*<span class="hljs-built_in">cos</span>(<span class="hljs-built_in">alpha</span>)*(<span class="hljs-number">1</span>/t1 - <span class="hljs-number">1</span>/t2);<span class="hljs-comment">// wind speed</span><br>c = H/<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">alpha</span>)*(<span class="hljs-number">1</span>/t1 + <span class="hljs-number">1</span>/t2);           <span class="hljs-comment"><code class="language-hljs processing"><span class="hljs-built_in">alpha</span> = <span class="hljs-built_in">atan</span>(<span class="hljs-number">2</span>*H/D);<br>v = H/<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">alpha</span>)*<span class="hljs-built_in">cos</span>(<span class="hljs-built_in">alpha</span>)*(<span class="hljs-number">1</span>/t1 - <span class="hljs-number">1</span>/t2);<span class="hljs-comment">// wind speed</span><br>c = H/<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">alpha</span>)*(<span class="hljs-number">1</span>/t1 + <span class="hljs-number">1</span>/t2);           <span class="hljs-comment">// sound speed</span><br></code></pre></td></tr></table></figure><p>为了测量风向，可以使用<code>arctan2</code>函数对两个垂直的方向进行计算。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs xl"><span class="hljs-function"><span class="hljs-title">beta</span> = atan2(NS, EW);  // north-&gt;</span><span class="hljs-function"><span class="hljs-title"><code class="language-hljs xl"><span class="hljs-function"><span class="hljs-title">beta</span> = atan2(NS, EW);  // north-&gt;</span><span class="hljs-function"><span class="hljs-title">south</span>, east-></span>west<br></code></pre></td></tr></table></figure><h2 id="实际问题，解决方案和折中方案"><a href="#实际问题，解决方案和折中方案" class="headerlink" title="实际问题，解决方案和折中方案"></a>实际问题，解决方案和折中方案</h2><p>在现实中，事情通常不会按照我们的期望进行，特别是在涉及模拟电路的情况下。</p><h3 id="机械设计"><a href="#机械设计" class="headerlink" title="机械设计"></a>机械设计</h3><h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><p>我使用 <a href="https://www.autodesk.com/products/fusion-360/overview">Fusion 360</a> 来设计硬件，并使用我的旧3D打印机来制造它们。</p><p>超声波探头位于顶部并向下方放置。<br>反射板是一个平整的表面。<br>电子元件和其他传感器位于探头上方的一个屏蔽盒内。</p><p>我甚至使用<a href="https://www.simscale.com/">Simscale</a>来做了一个气流模拟实验。<br>空气流速设置为<code>30m/s</code>，相当于<code>~58节</code>，空气流速相当于一场风暴的中心。</p><p><img src="QingStation-CDF.png" alt="QingStation-CDF"></p><p>如你所视，顶部和反射面之间的空气流动实际上快了约<code>3m/s</code>。我不确定我们是否需要在后续处理中考虑这一点。<br>由于我无法接触到风洞，所以无法在完美的实验环境中进行测试。</p><h4 id="声程"><a href="#声程" class="headerlink" title="声程"></a>声程</h4><p>正如简介中所示，理想情况下声波会沿着注明的路径传播。但实际情况则不同。</p><ul><li>有直接从发射换能器传播到接收换能器的声波。</li><li>这些声波会混合在一起。</li><li>3D打印的塑料是坚硬而轻巧的，非常适合放大声音。反射板也可能充当扬声器。</li></ul><p>这在Lau的作品中并不是问题，因为他的风速风向仪是基于金属框架的。</p><p><img src="anemometer_multiple_sound_path.png" alt="anemometer_multiple_sound_path"></p><p>这些声波可以在接收信号中看到。添加一些硬币作为配重可能有助于减小其他声波的幅度。</p><h3 id="超声波换能器-驱动"><a href="#超声波换能器-驱动" class="headerlink" title="超声波换能器, 驱动"></a>超声波换能器, 驱动</h3><p>下图是第二版原理图(PCB v1.1), 将在下面的章节阐述一些细节问题。<br><img src="anemometer-sch.png"></p><p>使用一个低电压的4052模拟开关控制选择哪个通道作为输出，哪个通道用来监听回波。激励信号由定时器的PWM通道产生，而回波输出则经过运放放大并由ADC测量。</p><h4 id="换能器"><a href="#换能器" class="headerlink" title="换能器"></a>换能器</h4><p>我从淘宝购买了几种不同的部件进行测试，它们分别是：</p><ul><li>一个 40kHz 10mm 的防水换能器(P&#x2F;N: EU10AIF40H07T&#x2F;R)</li><li>一个 200kHz 10mm 的防水换能器(P&#x2F;N: EU10PIF200H07T&#x2F;R)</li><li>一个 40kHz 16mm 的防水换能器 (P&#x2F;N: NU40A16TR-1)</li><li>几个HC-SR04类型的非防水换能器</li></ul><p>带有零件号的前三个换能器具有以下类似的参数。</p><ul><li>声压 10V(0dB&#x3D;0.02mPa) ≥106dB</li><li>接收灵敏度 40KHz(0dB&#x3D;V&#x2F;μbar)：≥-75dB</li><li>电容值都在几个 nF 左右，取决于它们的直径。</li></ul><p>我没有测试HC-SR04，因为它们比 10mm 的换能器要大得多。</p><p>最终选择了第一个，即 40kHz 10mm 的防水换能器(P&#x2F;N: EU10AIF40H07T&#x2F;R)。<br>因为它的尺寸小，有助于减小整体组装的大小。<br>与 200kHz 版本相比，它的价格便宜（价格只有后者的四分之一）。<br>高频率可以带来更短的脉冲，但 40kHz 的频率已经足够了。<br>它具有广泛的传播指向性（less than <code>-3dB @ 30degree</code>），这意味着我不需要像Lau调整换换能器的固定角度。<br>所有东西都可以平放简化了机械设计和组装过程。</p><p>关于频率选择：</p><blockquote><p>理想情况下，脉冲应尽可能短。<br>我们通常发送 3~4 个脉冲。<br>f&#x3D;40k, λ&#x3D;8.4mm 脉冲宽度为 33mm<br>f&#x3D;200k, λ&#x3D;1.68mm 脉冲宽度为 6.72mm<br>两者都小于高度（5cm）。<br>波长越短越好，但信号也会在传播过程中更快地衰减。<br>此外，更高的频率对反射板材料也有不同的要求。</p></blockquote><p>唯一剩下的问题是信号脉冲是否足够短，<br>以避免直接传播的信号（我们不需要）和反射传播的信号（我们需要）混合在一起的问题。</p><p>我没有考虑Lau博客中使用的muRata MA40E8-2，因为它已停产，而且价格也更高。</p><h4 id="驱动设计"><a href="#驱动设计" class="headerlink" title="驱动设计"></a>驱动设计</h4><p>驱动设计是一个棘手的部分，有很多困难需要克服。</p><p>为了考虑尺寸和低功耗，我没有使用传统的MOSFET驱动器和变压器来驱动换能器。相反，就像旧款HC-SR04一样，我决定使用RS-232接口驱动器（例如MAX3232）生成RS-232电平（-5.5V表示1，+5.5V表示0）的方波信号。它应该能够提供至少10Vpp的信号来驱动换能器。这些3V的变化都在3V电源上运行，因此所有的集成电路和传感器都可以在单一电源轨上运行。</p><p>这些RS-232芯片有很多替代品，它们的驱动能力对于换能器来说已经足够好了（几千欧姆和几纳法的并联）。这里使用的是MAX3222，它提供了一个关断引脚，可以节省功耗，相比较常用的MAX3232来说。这些芯片价格低廉，封装紧凑，采用小型的MSOP封装。</p><p>然而，这些芯片引入了一个来自驱动器方面的干扰问题。</p><p>MAX3222通过一个1uF电容器从其中一个输出通道驱动换能器。在接收器（换能器）一侧，通过一组钳位二极管到地和电阻，来确保信号不会传回到驱动器一侧。此外，另一组串联在驱动器电容器上的钳位二极管应该阻止来自MAX3232的任何噪声。但事实并非如此。</p><p>因为MAX3232&#x2F;3222是基于电荷泵方法产生负向和正向驱动电压的，所以无法获得平滑的输出电压，只能通过增加电容器来降低开关频率。</p><p>驱动电容器上的信号如下图所示：<br><img src="max3232_driver_noise.jpg"></p><p>尽管经过钳位二极管后，噪声已经“微不足道”了，甚至我的示波器也无法检测到，但仍然有一些噪声信号通过。这导致接收波形的失真。</p><p>这里是没有连接传感器时的波形，当连接传感器时，噪音会降低但仍然存在。同一通道表示驱动器（MAX3232）直接连接到接收器。交叉通道表示来自其他MAX3232或电源等未知源的噪声。<br><img src="anemometer_noise.png"></p><p>下图显示了由于驱动器一侧的噪声引起失真的实际信号。交叉通道的扰动可以忽略不计，但相同通道的扰动确实会影响回波波束的形状。请注意，这里显示的信号是在我将换能器粘贴到框架上之前采集的，因此信号振幅较大。当换能器粘贴到框架上时，失真效应增加，而信号幅度减小。这将导致在测量到达时间时遇到一些问题。<br><img src="anemometer_signal_distorsion.png"></p><p>我尝试了多种方法，包括给MAX3232的电荷泵电容增加容量。这有助于将纹波频率从<code>6.6kHz</code>降低到约<code>3kHz</code>，但对于降低纹波的幅度影响很小。</p><p>后来我发现电荷泵的触发非常简单，一旦电压达到再充电阈值，它就会切换。非常类似于PDM模式的DC&#x2F;DC转换器，低功耗，但噪声较高。这种噪声无法消除。</p><p>在第一版PCB（v1.0）中，我无法通过MAX3232消除这种噪声，因为两个MAX3232的电源由单个P-MOS控制。我无法在一个电源关闭的同时保持另一个电源以驱动换能器。因此，我设计了第二版PCB（v1.1），使用了MAX3222，当前通道在监听回波时,它可以进入关闭模式以停止电荷泵工作。希望这可以解决这些问题。</p><h3 id="回波信号和放大器"><a href="#回波信号和放大器" class="headerlink" title="回波信号和放大器"></a>回波信号和放大器</h3><p>（我很久以来很少接触模拟电路，这对于设计和调试肯定没有帮助）</p><p>当换能器接收到回波时，它在两个电极之间产生一个电压信号。<br>信号首先经过一个<code>4.7k</code>电阻，然后通过一个<code>100nF</code>电容器来阻隔直流信号。<br>接下来，信号经过一个模拟开关（4052，低电压版本），最后到达放大器。</p><p>由于我们使用单电源供电，4052不允许负电压信号通过。<br>作为替代，我们将每个通道的<code>100nF</code>电容器充电至虚地（<code>1/2 Vreff</code>），<br>然后开始发送脉冲并进行测量。<br>当通道切换时，需要等待一小段时间（<code>5ms</code>）使<code>100nF</code>电容器的充电至稳定电压。</p><h4 id="放大器"><a href="#放大器" class="headerlink" title="放大器"></a>放大器</h4><p>对于放大器，我使用了最常见的LMV358双运算放大器。</p><p>在PCB v1.0中，只使用了一个级联放大器来放大回波信号，而另一个用于生成低阻抗的虚地。</p><p>放大器的增益仅设置为<code>10倍</code>，以至于我在ADC数据中无法看到信号。我高估了信号强度。我尝试将增益调整为<code>约200倍</code>以获得更清晰的信号。然而，信号读取范围仍然太小（在<code>12位</code>、<code>4096</code>的ADC中约为<code>100digits/pp</code>）。</p><p>后来，直到我偶然在YouTube上看到了一个关于<a href="https://youtu.be/UooUGC7tNRg">运算放大器增益、带宽乘积和转换效率限制基础</a>的教程，我才意识到问题出在哪里。LMV358（以及其他所有运算放大器）在数据手册中列出的带宽是”单位增益”，也就是”增益-带宽乘积”，它并不能覆盖全频率范围。无论我设置多少，LMV358最大只能达到大约<code>1MHz/40kHz = 25倍</code>的增益。<br>更糟糕的是，我在反馈回路中加了一个<code>22pF</code>电容器用于RC滤波器，这也降低了增益。在<code>40kHz</code>时，<code>22pF</code>相当于<code>180k</code>欧姆。现在我知道为什么一开始看不到信号了，因为最后的带宽太小，过滤掉了所有信号。</p><p><em><strong>不幸的是，当我学习到GBP参数时，PCB v1.1的制造和组装已经完成并正在漫漫长路中向我走来。在PCB v1.1中，两个运算放大器都用于放大回波信号。第一级被设置为低输入阻抗，以帮助信号在通道切换时更快地稳定（向电容器充电）。两级运算放大器还允许更高的总增益，同时仍然让<code>40kHz</code>的信号通过。<code>22pF</code>电容器被放置在第二级运算放大器上，在收到板子后需要拆焊。</strong></em><br>虚地现在由电压分压器和一个大电容提供。新的电路在仿真中看起来很好。然而，在这个电路中，我们仍然无法测试<code>200kHz</code>的换能器，除非我更换为高带宽的运算放大器并放弃我之前购买的大量LMV358。</p><h4 id="来自驱动的噪声"><a href="#来自驱动的噪声" class="headerlink" title="来自驱动的噪声"></a>来自驱动的噪声</h4><p>我认为钳位二极管中的小电容器导致驱动端的噪声到达了接收端。这一点在使用EasyEDA构建的模拟电路中也得到了验证。即使在干净的电源下，仍然可以观察到小幅度的噪声传输到接收端。1N4148二极管无法完全阻止来自驱动端的噪声。希望在PCB v1.1中能够解决这个问题，我已经将MAX3232更换为MAX3222以停止充电泵的工作。</p><h4 id="PCB-v1-1-Updates"><a href="#PCB-v1-1-Updates" class="headerlink" title="PCB v1.1 Updates"></a>PCB v1.1 Updates</h4><p>对于PCB v1.1，通过关闭接收端驱动器，上述问题被消除。在采样过程中，测量值保持在几个位数内的稳定范围。</p><h3 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h3><p><em>信号处理的代码可以在专用的固件存储库中找到。</em></p><h4 id="ADC-setting"><a href="#ADC-setting" class="headerlink" title="ADC setting"></a>ADC setting</h4><p>STM32L476的ADC非常强大，可以达到<code>5Msps</code>的采样率。在这里，我将采样率设置为<code>1MHz</code>，因为没必要设置得更高：</p><ul><li>LMV358只有<code>1MHz</code>的GBP。</li><li>即使达到<code>5Msps</code>，对分辨率的改进也不显著。</li><li>通过线性插值可以实现亚分辨率的准确度（在信号处理部分有详细说明）。</li></ul><p>在每个脉冲中，ADC采样<code>1毫秒</code>，收集正好<code>1000</code>个样本。使用DMA来减少CPU占用，同时确保采样的时候不受其他任务的影响。这对于高度在<code>4cm</code>到<code>10cm</code>范围内足够了。</p><p>第一个回波到达的时间以及ADC需要采样的时间是多少？</p><blockquote><p>假设高度(H)&#x3D;<code>5cm</code>，间距(D)&#x3D;<code>4cm</code>，声速(C)&#x3D;<code>336m/s</code></p><p>声音传播的距离是<code>S = sqrt((D/2)^2 + H^2) * 2 = 10.7cm</code>。</p><p>在无风时，第一个脉冲大约发送后<code>318us(t = 0.107 / 336)</code>到达。<br>即使在H&#x3D;<code>10cm</code>时，<code>t=588us</code>。<code>1000</code>个样本也是完全足够的。</p></blockquote><p>ADC的分辨率设置为<code>12bit</code>，这是没有进行任何硬件过采样的最大原始分辨率。</p><p>为了确保脉冲发送和ADC开始之间的时间是恒定的，在开始激励和开始ADC采样之间，使用RT-Thread的API暂停所有CPU中断。</p><h4 id="信号处理-1"><a href="#信号处理-1" class="headerlink" title="信号处理"></a>信号处理</h4><p>在放大器层输出的信号输出已经加了<code>1/2 Vreff</code>的偏置，其中Vreff等于MCU的Vdd <code>3.3V</code>。因此，在没有信号时，信号输出应该在<code>4095/2 = 2047.5</code>左右。</p><p>在预处理阶段，</p><ul><li>ADC采样值处理到零点附近并转换为浮点数。</li><li>使用带通滤波器。</li><li>最后归一化到最大值为<code>1</code>。<br>后来我发现数字带通滤波器可以有效降低环境引起的干扰信号。所以我回过头来添加了数字滤波器来平滑信号。这有助于减少检测到的错误峰值的数量。<br>这里使用了一个带通Butterworth滤波器，带宽为<code>40kHz</code>载波频率周围的<code>2kHz</code>或<code>10kHz</code>。</li></ul><p>下面的图像显示了<code>10kHz</code>带宽滤波器的通带。<br>对于信号精度浮点数计算，任何阶数超过<code>4</code>都已经不稳定了。（系数已转换为float32）<br>这里使用了<code>1</code>阶<code>10kHz</code>带宽以获得最大的稳定性。</p><p><img src="anemometer_digital_filter_response.png"></p><p>目前的滤波器是IIR类型的，但我不太喜欢在这里使用它，因为相位延迟在风速计算中扮演着非常重要的角色。<br>我们来看看是否需要将其替换为FIR滤波器，它在所有频率上具有恒定的相位延迟。</p><h4 id="回波脉冲"><a href="#回波脉冲" class="headerlink" title="回波脉冲"></a>回波脉冲</h4><p>在非编码激励中，回波脉冲的长度比激励脉冲要长得多。</p><p>这是我示波器记录的第一个回波。激励脉冲的长度为<code>4</code>个脉冲。</p><p>你可以看到回波中有很多脉冲，而不仅仅是我们发送的4个。回波的包络呈现出一个非常漂亮的菱形形状。我们可以利用这个形状来粗略测量传播时间。或者，如果信号没有像驱动器部分提到的那样失真，我们也可以简单地利用最大幅值来测量。</p><p>在实际应用中，我尝试了几种不同的激励方式，包括Lau建议的巴克码（barker-codes）。</p><pre><code class="hljs">// 单倍速率（40k）//uint16_t pulse[] = &#123;50, 50, 50, 50&#125;;// 双倍速率（80k），用于控制+1或-1相位// 这有点棘手--这是使其工作的唯一方法。// STM32的定时器似乎要求第一个周期不是100％宽度。// 因此，在每个脉冲中有一个虚拟的&#39;L&#39;，如果末尾不是&#39;L&#39;，则每个末尾还有一个虚拟的&#39;L&#39;。// +1是&#39;H, L&#39;。-1是&#39;L, H&#39;//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, H, L&#125;; // 普通 -&gt; ++++//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L, H, L&#125;; // 普通抑制 -&gt; +++--uint16_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L, H, L, H, L&#125;; // 扩展抑制 -&gt; +++---//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, H, L, L, H, L, H, L&#125;; // 普通抑制2 -&gt; ++++--//uint16_t pulse[] = &#123;L, H, L, H, L, L, H, H, L&#125;; // 巴克码4.1 -&gt; ++-+//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, H, L, L, H, L, H, H, L, H, L&#125;; // 长巴克码4.1 -&gt; ++++--++//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L&#125;; // 巴克码4.2 -&gt; +++-//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L, H,  H, L, L, H, L&#125;; // 巴克码7 -&gt; +++--+-uint32_t pulse_len = sizeof(pulse) / sizeof(uint16_t);</code></pre><p>在上述列表中，我能够得到最好结果的扩展抑制，它发送了3个正脉冲后跟3个负脉冲。这也是调制频率为<code>13.3kHz</code>的巴克码2。其他方法使信号平坦外，没有任何帮助。</p><p>原因可能是驱动器和换能器的限制，不允许更高的调制频率。</p><p><img src="anemometer_excitation.png"></p><p>Update: 2021-05-13</p><p>之前提到的激励振幅太低了。<br>在风速超过<code>30mph</code>的测试中，它在大多数情况下无法捕捉到回波信号。<br>这里使用了一种新的激励方式：</p><pre><code class="hljs">#define H 98#define L 0#define P H,L#define N L,Hconst uint16_t cpulse[] = &#123;P,P,P,P,P,P,N,N,N,N,P,P,N&#125;;</code></pre><p>这个模式有<code>6</code>个正相位，将振幅由原来的原来的<code>1950~2150</code>（<code>200</code>）增加到了<code>1830~2270</code>（<code>440</code>）。<br>随后是一些负相位（起到阻尼作用）。</p><p><img src="anemometer_final_beam.png"></p><h4 id="定位回波-峰值匹配"><a href="#定位回波-峰值匹配" class="headerlink" title="定位回波 - 峰值匹配"></a>定位回波 - 峰值匹配</h4><p>我们需要测量声束在路径中传播的时间。因此，我们需要以某种方式识别声束，并测量其传播时间<code>dt</code>。</p><p>在这里，<code>dt</code>通过两个步骤来测量。</p><ul><li>峰值匹配 - 粗略测量声束的位置，精确度为半个周期，即<code>12.5us</code>。</li><li>零交叉 - 将准确度提高到亚数级 <code>1us</code></li></ul><p>我第一步使用方法被称为<strong>峰值匹配</strong>。<br>首先，我们找到最大值作为声束的主峰值。<br>然后，我们检测主峰值之前和之后的一些峰值的转折点。<br>我们存储正峰和负峰（谷）的索引和值。</p><p>在搜索阶段，我们使用先前收集的参考信号峰（校准值）在新测量的信号峰上进行滑动，并根据每个峰值之间的差异计算出一组均方根误差（MSE）。<br>然后，我们可以使用最小的MSE来匹配偏移量（如果有的话）。<br>搜索范围为<code>9</code>或<code>±4</code>；由于我们还统计了波谷值，因此实际范围为最大值之前的<code>2</code>个峰值和最大值之后的<code>2</code>个峰值。</p><p>正如您可能注意到的，我们只捕获了主峰值周围的几个峰值，其中主峰值是最大值。<br>但有时由于环境噪声或湍流等原因，最大值可能不是主峰值。因此，仅仅通过捕获最大峰值来定位声束是行不通的。</p><p>匹配信号的精度可以达到ADC采样周期时间的分辨率，即<code>~1us @ 1Msps</code>。</p><p>这目前是最不稳定的部分，因为来自驱动器的干扰会影响对回波的检测。<br>有时这种方法会失败，并导致检测偏移一个周期，即<code>25us</code>。</p><p>这里显示了一些（<code>50</code>个）’fault’的信号；这些ADC测量值是在无风时记录的，但无法计算（它们看起来很好）。<br>信号的最大峰值已标记。<br>您可以看到即使在完全无风的状态下，峰值也会出现错位。</p><p><img src="anemometer_misaligned_peaks.svg"></p><p>实际应用中，在我安静、无风起居室中，大约<code>50</code>次测量中会出现<code>1</code>次不对齐的峰值测量，而在电视旁边则大约每5次测量中的就有1次不对齐的峰值测量。经过均方误差（MSE）峰值匹配后，大多数测量结果可以得到纠正，并仍然能提供良好的风速数据。在12小时的测量中，43200次测量中仅有340次测量出现误差，误差率为<code>0.7%</code>。</p><p>但这未结束，进一步的纠正方法是使用从<code>dt</code>计算得到的声速。如果计算得到的声速与从温度估算得到的声速相差较大，则说明<code>dt</code>测量可能存在错误。一旦检测到错误，立即进行另一次测量。</p><h4 id="Zero-Crossing-detection-and-interpolation"><a href="#Zero-Crossing-detection-and-interpolation" class="headerlink" title="Zero-Crossing detection and interpolation"></a>Zero-Crossing detection and interpolation</h4><p>为了进一步提高 ADC 采样周期的亚位分辨率，即 <code>&lt;1us</code>，我们可以利用插值零交叉点来同时利用采样时刻和 ADC 测量值。</p><p>这种方法也是由 <a href="https://www.dl1glh.de/ultrasonic-anemometer.html#advancement">Lau 的博客</a> 建议的。</p><p>零交叉的分辨率可以非常高。下面是几百个ADC原始测量值。你可以看到在接近零点的区域，信号呈现线性函数的形状，斜率约为<code>30</code>。这意味着在这种特定情况下，经过插值后，我们可以产生比原来<code>1us</code> 小<code>30</code>倍的分辨率，即<code>33ns</code>。</p><p>斜率越陡，分辨率越高，但精度也取决于信号的分布。</p><p><img src="anemometer_zero_point.png"></p><p>这种方法需要对原始信号进行稳定的零位校准，该过程在第一步的预处理中进行。每个通道的零偏差在上电时，通过测量和平均没有发送激励的时信号进行校准，大约需要约 <code>1</code> 秒的时间。零位校准也可以在操作过程中进行，例如每小时或每发生 <code>1℃</code> 温度变化时进行校准，以最大化准确性。</p><p>因为所有 <code>4</code> 个通道共享同一个放大器，所以它们也共享微小的偏置（如果有的话），这将被抵消掉。每个通道的实际零偏差都在 <code>2046~2047</code> 附近，非常稳定和准确。但偶尔会出现某个或所有通道存在一些偏差，如下图所示。东和西通道的偏移向上漂移。这个测量结果被故障检测所丢弃（西通道也有相当大的形变）。</p><p><img src="anemometer_zero_offset_example.png"></p><p>在启动时，我们可以采集一组零交叉点，用于无风状态的校准。在后续的测量中，为了避免上述的偏差问题，我们采用动态归零方法。在每次测量开始之前，我们进行一次不发送激励信号的ADC测量，以获得实时零点，消除来自电源或其他因素的偏差。</p><p>对于每个通道，我们在每个回波的最大幅值周围插值<code>6</code>个零交叉点。因为峰值周围的波形是最相似的。这些零交叉点取平均并产生一个数值，代表这些交叉点的位置。我们发现它们的平均值非常稳定，因此不需要比较所有的零交叉时刻。</p><p>这样可以实现相当稳定的亚位级精度，至少在无风状态下是如此。一个简单的测试结果显示，原始测量值的标准误差为<code>0.037us</code>，已经非常接近我们计算的理论分辨率（相当于<code>0.051m/s</code>）。通过对几次测量进行平均，可以获得更好的精度。与其他参数一样，测量速率和过采样率可以通过配置文件进行设置。这种简单处理可以提供的精度水平已经非常令人期待！</p><p>下图显示了北-南方向的第一个风速测量结果。</p><p><img src="first_windspeed_measurement.png"></p><p>Update: 2021-05-13</p><p>现在不需要启动时进行 ADC 零校准了。相反，我在每次采样之前添加了没有激励的 ADC 采样。这样我们可以在实际测量阶段之前进行动态零校准。因此，通过温度或电源引起的偏移可以被最小化。</p><h4 id="脉冲压缩"><a href="#脉冲压缩" class="headerlink" title="脉冲压缩"></a>脉冲压缩</h4><p>脉冲压缩在雷达系统中非常常见，Lau的工作也使用了脉冲压缩技术，但我不确定他是如何使用的。如果<strong>峰值匹配</strong>方法的稳定性不够，我将尝试使用巴克码（<code>barker-code</code>）实现编码激励。</p><p>执行匹配滤波器（脉冲压缩）是相当简单，但它需要更多的CPU时间，因为它基本上是信号相关运算（类似于机器学习中的卷积）。如果需要，可以进行<code>8/16bit</code>定点数的量化，然后使用神经网络加速核来提高速度。</p><p>在初步测试中，对于巴克码4.1 <code>+++-</code>，MCU花费了46ms来计算所有4个通道（100 x 1000相关）。负载还可以接受，但与只需要6ms的<strong>峰值匹配</strong>方法相比，仍然花费了太多时间。我没有测试两个通道之间的全相关，例如北方与南方，这将导致最多<code>1000 x 1000</code>相关，比这个实验复杂<code>10</code>倍。当然，并不需要进行全相关，我测试了<code>300 x 300</code>的两个信号。每对通道需要大约40ms。</p><p>我不确定为什么在相关性之后，旁瓣仍然相当大，不如原始信号好。反转的信号（-）只被稍微降低了峰值，理论上应该被抑制或反转。</p><p>可能存在以下问题：</p><ul><li>调制频率过高，超出了换能器的处理能力。我尝试了<code>40kHz</code>和<code>20kHz</code>，没有太大差别。</li><li>或者我的处理方式有误。</li></ul><p>Lau的换能器与我的换能器之间的主要区别在于封装材料。我使用的是铝制的，而他使用的是塑料制的。另一个潜在问题是驱动电压，我的电压只有<code>10.5Vpp</code>，而Lau通过一个变压器（未知）使用更高的电压。</p><p>也许现在先放一放这个问题。</p><p>Update: 2020-05-13</p><p>在查阅了许多文献后，我发现在高频率下调制激励信号非常困难。换能器的惯性会导致相位漂移至少4个或更多周期，具体取决于振幅。我只成功地在<code>10kHz</code>（即<code>40kHz</code>载波频率中的每<code>4</code>个周期）编码了相位。但是这种信号在强风中太微弱无法稳定。</p><p>尝试并失败的过程非常令人沮丧。在这段时间里，我与Lau进行了几次电子邮件的交流。感谢他的回复，进一步解释了他的设置，我终于明白了问题所在。他的风速仪比我建造的仪器具有更强的驱动能力，而且他的换能器是塑料外壳，惯性小于我使用的铝制外壳换能器。</p><h4 id="提取风速和声速"><a href="#提取风速和声速" class="headerlink" title="提取风速和声速"></a>提取风速和声速</h4><p>最终，我们获取了4个通道时间差（dt）的可靠测量结果，结合机械参数（高度和倾角），我们可以使用<a href="https://www.dl1glh.de/ultrasonic-anemometer.html#advancement">Lau</a>提供的方程计算风速。</p><p>风向也可以通过垂直的通道推断得出。</p><p>此外，我们还可以直接提取当前声速，而不是通过大气压力和温度来估算。</p><p>以下是C语言中的示例代码：</p><pre><code class="hljs">// 风速计算ns_v = height / (sin_a * cos_a) * (1.0f/dt[NORTH] - 1.0f/dt[SOUTH]);ew_v = height / (sin_a * cos_a) * (1.0f/dt[EAST] - 1.0f/dt[WEST]);v = sqrtf(ns_v * ns_v + ew_v * ew_v);// 声速计算ns_c = height / sin_a * (1.0f/dt[NORTH] + 1.0f/dt[SOUTH]);ew_c = height / sin_a * (1.0f/dt[EAST] + 1.0f/dt[WEST]);c = (ns_c + ew_c) / 2;// 航向角计算course = atan2f(-ew_v, -ns_v) / 3.1415926 * 180 + 180;</code></pre><p>一次夜间的静风测量显示，测量得到的声速与由温度估算的声速相当匹配。下面的测量温度范围为<code>20.4℃</code>至<code>25.6℃</code>。</p><p><img src="anemometer_speed_of_sound.png"></p><h4 id="故障检测和修正"><a href="#故障检测和修正" class="headerlink" title="故障检测和修正"></a>故障检测和修正</h4><p>来自环境噪声或其他板载电子器件的干扰源很多，有时会导致信号变形，正如我之前提到的那样。确实还有其他我无法发现的隐藏干扰源。</p><p>由于对低功耗的要求，我没有实现任何滤波器来检测基于先前测量的最终结果。因为如果设备需要休眠长达30秒，风速的差异可能非常大。</p><p><strong>波束不对齐</strong></p><p>在检测波束不对齐的情况下，如我在<strong>峰值匹配</strong>中提到的，<br>我还计算了MSE误差的历史记录，并且在每次MSE计算时以较低的速率进行更新。<br>为历史MSE添加了一个硬阈值，以设置最终的MSE阈值。<br>这种方法可以有效地过滤掉大约9&#x2F;10的波束不对齐情况，这些情况不能通过简单的最小MSE恢复。<br>下面是一个演示，展示了动态MSE和最终阈值。</p><p><img src="anemometer_mse_threshold.png"></p><p><strong>声速保护</strong></p><p>还有一种最终的保护措施可用于检测错误，即从<code>dt</code>计算得出的声速。<br>声速测量非常稳定，可以通过其他传感器测量的温度进行估计。<br>通过温度估算的风速与通过<code>dt</code>估算的风速之间的差异通常小于<code>2&lt;m/s</code>。<br>差异阈值设定为<code>5m/s</code>。</p><p>如果在任何通道中检测到上述任何错误，则当前测量将被丢弃，并立即进行新的测量。</p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>为了帮助调试，一旦检测到故障，<code>4</code>个通道的ADC测量结果将被记录到SD卡中。<br>实际上，上述部分显示的大多数故障数据都是从这些记录数据中绘制出来的。</p><p>我还编写了一些Python脚本来对数据进行后处理，以及一些Processing3脚本来实时显示数据。<br>它们非常有帮助。以下是Processing3脚本绘制<code>4</code>个通道的实时数据的屏幕录制。</p><p><img src="anemometer_processing3_demo.gif"></p><p>Overall, I would like to repeat what Lau has said in his blog “building the anemometer is definitely not as easy as I thought.” </p><h4 id="时间控制"><a href="#时间控制" class="headerlink" title="时间控制"></a>时间控制</h4><p>对于每个通道，测量会在开始时切换模拟信号路径并使能专用的驱动器。<br>然后我们等待<code>4ms</code>，让信号路径稳定，并让驱动器充能至其补充电势（小于<code>150us</code>）。</p><p>我们进行一次<code>空闲</code>测量（无激励）以获取ADC测量的零点，这需要<code>1ms</code>。</p><p>然后，通过DMA通道将编码脉冲发送到定时器，以产生超声波。同时，定时器还触发ADC开始采样。另一个DMA通道负责收集所有测量数据。这需要额外的<code>1ms</code>来完成。</p><p>总体而言，采样所有通道需要约<code>25ms</code>的时间。</p><p>一旦所有<code>4</code>个通道的数据采样完成，那么就会执行上述部分提到的所有数据处理操作。<br>整个处理过程需要<code>19ms</code>的时间。因此，每次测量需要<code>19+25=44ms</code>。</p><p>测量和处理时间比我预期的要短。这要归功于<strong>峰值匹配</strong>方法，相对于其他相关方法而言，它的计算开销较小。</p><p>总体而言，我对处理时间非常满意，小于<code>50ms</code>的处理时间允许MCU和模拟电路休眠更长时间以节省功耗。<br>一旦检测到故障，我们仍然有足够的时间来进行更多的采样，以获得正确的测量结果。或者，在功耗不是问题的情况下，可以每秒进行高达<code>20</code>倍的过采样，以获得更高的精度。</p><h4 id="处理方法总结"><a href="#处理方法总结" class="headerlink" title="处理方法总结"></a>处理方法总结</h4><p><img src="anemometer_windspeed_measurement.png"></p><p>通过使用上述的处理方法，风速测量仪现在能够产生相当稳定的测量结果。上述的1小时测量是在一个有风、晴朗下午进行的，没有出现任何不可恢复的故障。</p><p>主要的困难包括：</p><ul><li>选择和生成合适的脉冲信号。</li><li>在校准和实时测量中定位波束都很困难。</li><li>故障检测。决定何时修正信号以及何时重新进行测量。</li></ul><p>这些部分是我付出了大部分努力的地方。</p><p>但处理方法一旦确定下来，单一的固件在我构建的4个不同硬件上都能轻松运行。</p><h3 id="Keep-out-zone（禁飞区）"><a href="#Keep-out-zone（禁飞区）" class="headerlink" title="Keep out zone（禁飞区）"></a>Keep out zone（禁飞区）</h3><p>在开发过程中，我发现任何存在于该区域内的物体都会影响声波束的形状，从而影响或导致风速测量失败。</p><ul><li>在1号区域存在的物体会导致所有测量失败。</li><li>在2号区域存在的物体会导致校准失败，但上述算法仍然能够产生稳定的测量结果。</li></ul><p><img src="anemometer_keep_out_zone.png"></p><p>当一只鸟停在反射板上时，很有可能造成测量完全失败。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="车载测试"><a href="#车载测试" class="headerlink" title="车载测试"></a>车载测试</h3><p>我使用一个直径为<code>88mm</code>的磁性车顶安装支架将QingStation安装在汽车车顶上。我使用了一些3D打印的零件和一个<code>38 x 2.2cm</code>的PVC管将其抬高了一点，这样车辆产生的压缩气流就不会对其产生太大影响。从车顶到QingStation顶部的实际高度为<code>55cm</code>。汽车的高度为<code>1410mm</code>，所以总高度略小于<code>2m</code>。</p><p>第一次测试：<br><img src="anemometer_car_experiment2.jpg"></p><p>第二次测试：<br><img src="anemometer_car_experiment1.jpg"></p><p>GNSS速度和风速测量的比较。</p><p><img src="anemometer_gnss_vs_wind.png"></p><p>风速测量结果高于GNSS速度。</p><ul><li>这可能是因为位置仍处于车辆压缩气泡内，空气速度被压缩和增加。</li><li>或者可能是计算有问题。</li><li>或者可能是前方车辆的气流。</li><li>或者是风。</li></ul><p>下面是风速测量和30秒平均值的图表。30秒平均值更有意义。</p><p><img src="anemometer_car_windspeed.png"></p><p>大部分时间，我们停在道路中间等待5或6辆过往的列车。幸运的是，我们是队列中的第一辆车，所以我享受了观看它们的时间。</p><p><img src="anemometer_car_experiment3.jpg" alt="anemometer_car_experiment3"></p><h3 id="高速公路测试"><a href="#高速公路测试" class="headerlink" title="高速公路测试"></a>高速公路测试</h3><p>我打印了一个较短的支杆以降低重心。计划是在高风速下测试风速计，因为这从未尝试过。</p><p>我只安装了雨量传感器镜头，将其安装在通风孔上。然后…很快就遇到了大雨。</p><p>不幸的是，SD卡在刚开始遇到降雨时就出现故障。在大雨中，QingStation继续发送MQTT消息，直到我们到达目的地（Durdle Door）为止。</p><ul><li>风速计在雨中大约运行了30分钟后，出现了故障。</li><li>在电路板打湿后，所有的数字传感器都停止工作。</li><li>气压计在几分钟内发生故障，然后恢复正常。</li><li>电池电压在连接器打湿后几分钟内急剧下降至3.1V。</li><li>RTC时钟停止工作（晶振元件潮湿）。<br>不确定是否发生了电化学反应或ADC引脚被润湿（也许这也是风速计失败的原因）。</li><li>SD卡上有一些随机的文件&#x2F;文件夹被写入。数据文件都没问题，但日志文件出错。</li><li>日志记录失败，MQTT消息未保存，所以我不知道出了什么问题。</li></ul><p>一切干燥后，它们都恢复正常工作。</p><p><img src="anemometer_motorway_rain.png" alt="anemometer_motorway_rain"></p><p>日志显示在小于<code>72km/h</code>（<code>20m/s</code>）的风速下，测量结果呈现完美的跟随性，但在<code>108km/h</code>（<code>30m/s</code>）时开始出现故障。<br>这也可以从错误代码（未列出）中看出。风速计在高速（<code>30m/s</code>）时开始有些挣扎，几乎每<code>3s</code>报告一次错误。但它仍然可以在<code>1s</code>的记录周期内提供良好的测量结果。但是有3次测量失败，报告的风速甚至达到200km&#x2F;h。</p><p>我认为这个结果是可以接受的，因为大于<code>20m/s</code>的风速并不是始终存在的。</p><p>由于安装点较低，风速计受到的空气加速效应比之前的低速测试更大。我认为这在正常范围内。但由于我无法使用到风洞来校准传感器，所以我无法进一步进行标定工作。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 风速风向 </tag>
            
            <tag> 超声波 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于嵌入式Linux交叉编译的一些问题</title>
      <link href="/2023/06/09/guan-yu-qian-ru-shi-linux-jiao-cha-bian-yi-de-yi-xie-wen-ti/"/>
      <url>/2023/06/09/guan-yu-qian-ru-shi-linux-jiao-cha-bian-yi-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式交叉编译的流程"><a href="#嵌入式交叉编译的流程" class="headerlink" title="嵌入式交叉编译的流程"></a>嵌入式交叉编译的流程</h2><ol><li><p>预处理<br>xxx-gcc -E -o a.i a.c<br>a.c -&gt; a.i</p></li><li><p>编译<br>xxx-gcc -S -o a.s a.i<br>a.i -&gt; a.s</p></li><li><p>汇编<br>xxx-gcc -c -o a.o a.s<br>a.s -&gt; a.o  </p><p><em><strong>PS: -c 选项可以一次性完成1-3步，即 a.c -&gt; a.o</strong></em></p></li><li><p>链接<br>xxx-gcc -o a a.o xx.o<br>a.o + b.o + xx.o -&gt; a（可执行文件） </p><blockquote><p>.c : c文件</p><p>.i : 预处理文件</p><p>.s : 汇编文件</p><p>.o : 目标文件（二进制机器码）</p><p>最后生成的是可执行文件（二进制）</p></blockquote></li></ol><p><img src="gcc%E7%BC%96%E8%AF%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="编译示意图"></p><p> 更多内容可参考 <a href="https://zhuanlan.zhihu.com/p/476697014">https://zhuanlan.zhihu.com/p/476697014</a></p><h2 id="库的作用"><a href="#库的作用" class="headerlink" title="库的作用"></a>库的作用</h2><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><h3 id="怎么使用库？"><a href="#怎么使用库？" class="headerlink" title="怎么使用库？"></a>怎么使用库？</h3><h3 id="链接过程中如何使用库？"><a href="#链接过程中如何使用库？" class="headerlink" title="链接过程中如何使用库？"></a>链接过程中如何使用库？</h3><h3 id="程序运行时如何使用库？"><a href="#程序运行时如何使用库？" class="headerlink" title="程序运行时如何使用库？"></a>程序运行时如何使用库？</h3><h3 id="多个库可以合成一个库吗？"><a href="#多个库可以合成一个库吗？" class="headerlink" title="多个库可以合成一个库吗？"></a>多个库可以合成一个库吗？</h3><h1 id="下一篇：关与I2C的一些问题"><a href="#下一篇：关与I2C的一些问题" class="headerlink" title="下一篇：关与I2C的一些问题"></a>下一篇：关与I2C的一些问题</h1><h1 id="下一篇：关于超声波测量风速风向的一些问题"><a href="#下一篇：关于超声波测量风速风向的一些问题" class="headerlink" title="下一篇：关于超声波测量风速风向的一些问题"></a>下一篇：关于超声波测量风速风向的一些问题</h1>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交叉编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux wifi connect</title>
      <link href="/2023/06/07/linux-wifi-connect/"/>
      <url>/2023/06/07/linux-wifi-connect/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-wifi-连接"><a href="#Linux-wifi-连接" class="headerlink" title="Linux wifi 连接"></a>Linux wifi 连接</h1><h2 id="wifi-开启-x2F-关闭"><a href="#wifi-开启-x2F-关闭" class="headerlink" title="wifi 开启&#x2F;关闭"></a>wifi 开启&#x2F;关闭</h2><ol><li>ifconfig -a &#x2F;&#x2F;查看网络设备</li><li>ifconfig wlan0 up  &#x2F;&#x2F;开启wifi<br>中间启动失败的问题，经查看日志，发现wifi驱动的 .bin 文件无法打开，将对应版本文件copy到文件夹中，即可正常打开</li></ol><h2 id="wifi-搜索"><a href="#wifi-搜索" class="headerlink" title="wifi 搜索"></a>wifi 搜索</h2><ol><li>iw wlan0 scan |grep SSID  &#x2F;&#x2F;搜索wifi热点，并显示SSID</li></ol><h2 id="wifi配置"><a href="#wifi配置" class="headerlink" title="wifi配置"></a>wifi配置</h2><ol><li>wpa_passphrase [SSID] [KEYS] &gt;&gt; &#x2F;etc&#x2F;wpa_supplicant.conf &#x2F;&#x2F; 将wifi信息写入配置文件</li><li>wpa_supplicant -B -i wlan0 -c &#x2F;etc&#x2F;wpa_supplicant.conf &#x2F;&#x2F;启动应用 [-B 后台运行] [-i 接口名称] [-c 配置文件][-D 驱动程序名称]</li><li>iw dev wlan0 link &#x2F;&#x2F;回复wifi连接状态</li><li>udhcpc &#x2F;&#x2F;自动获取ip</li><li>ifconfig wlan0 [ip] &#x2F;&#x2F;自动获取ip失败后，可手动配置</li></ol><h2 id="wifi连接后，无法ping通外网"><a href="#wifi连接后，无法ping通外网" class="headerlink" title="wifi连接后，无法ping通外网"></a>wifi连接后，无法ping通外网</h2><ol><li>可能是网关未设置<br>route  &#x2F;&#x2F;列出路由信息</li><li>route add default gw [gw_addr] &#x2F;&#x2F;配置网关地址</li></ol><h2 id="关于wpa-supplicant-WIFI工具"><a href="#关于wpa-supplicant-WIFI工具" class="headerlink" title="关于wpa_supplicant(WIFI工具)"></a>关于wpa_supplicant(WIFI工具)</h2><p>wpa_supplicant是一个连接、配置WIFI的工具，它主要包含wpa_supplicant与wpa_cli两个程序,pa_supplicant是核心程序，它和wpa_cli的关系就是服务和客户端的关系：后台运行wpa_supplicant，<br>使用wpa_cli来搜索、设置、和连接网络.</p><ol><li><p>启动wpa_supplicant应用:<br> wpa_supplicant -Dnl80211  -c &#x2F;etc&#x2F;wpa_supplicant.conf -i wlan0  -B<br>-D 驱动程序名称（指定WiFi驱动程序：nl80211，wext）<br>-i 接口名称<br>-c 配置文件　<br>-B 在后台运行守护进程<br>-d &#x3D; increase debugging verbosity (-dd even more)<br>不支持82011用法：<br>wpa_supplicant -D wext -c &#x2F;etc&#x2F;wpa_supplicant.conf -i wlan0 &amp;</p></li><li><p>启动wpa_cli<br>wpa_cli -i wlan0 scan         　&#x2F;&#x2F;搜索附件wifi热点<br>wpa_cli -i wlan0 scan_result 　 &#x2F;&#x2F;显示搜索wifi热点<br>wpa_cli -i wlan0 status        &#x2F;&#x2F;当前WPA&#x2F;EAPOL&#x2F;EAP通讯状态<br>wpa_cli -i wlan0 ping          &#x2F;&#x2F;pings wpa_supplicant</p></li><li><p>添加新的连接<br>wpa_cli -i wlan0 add_network   &#x2F;&#x2F;添加一个网络连接,会返回<network id><br>wpa_cli set_network <network id>  ssid ‘“name”‘  &#x2F;&#x2F;ssid名称<br>wpa_cli set_network <network id>  psk ‘“psk”’　　&#x2F;&#x2F;密码<br>wpa_cli set_network <network id>  scan_ssid 1<br>wpa_cli set_network <network id>  priority  1   &#x2F;&#x2F;优先级</network></network></network></network></network></p></li><li><p>保存连接<br>wpa_cli -i wlan0 save_config   &#x2F;&#x2F;信息保存到默认的配置文件中</p></li><li><p>连接已有连接<br>wpa_cli -i wlan0 list_network  &#x2F;&#x2F;列举保存过得连接<br>wpa_cli -i wlan0 select_network  <network id>  &#x2F;&#x2F;连接指定的ssid </network></p></li><li><p>save_config之后的wpa_supplicant.conf文件示例:<br>ctrl_interface&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant&#x2F;<br>ap_scan&#x3D;1<br>network&#x3D;{<br> scan_ssid&#x3D;1<br> ssid&#x3D;”xxxx”<br> psk&#x3D;”xxxx”<br> priority&#x3D;2 &#x2F;&#x2F;wifi连接优先级<br>}</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wifi </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Embeded-Software-Architecture</title>
      <link href="/2023/05/25/embeded-software-architecture/"/>
      <url>/2023/05/25/embeded-software-architecture/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌入式软件架构"><a href="#嵌入式软件架构" class="headerlink" title="嵌入式软件架构"></a>嵌入式软件架构</h1><h2 id="嵌入式软件架构的六个步骤"><a href="#嵌入式软件架构的六个步骤" class="headerlink" title="嵌入式软件架构的六个步骤"></a>嵌入式软件架构的六个步骤</h2><h3 id="1-架构抽象层"><a href="#1-架构抽象层" class="headerlink" title="1. 架构抽象层"></a>1. 架构抽象层</h3><p>抽象层是嵌入式软件架构中最重要的一个步骤。它提供了一个关注点分离的方法，将底层硬件和顶层应用程序隔离开来。这种隔离使得应用程序更易于编写和维护，同时也使得底层硬件更易于更换和升级。此外，抽象层还能够提高软件的可移植性和可重用性，因为它使得软件更易于在不同的硬件平台上运行。</p><p>反思：目前自己写的代码，有很多直接在应用层调用底层代码，耦合程度严重，不符合依赖倒置原则，更换芯片后移植也困难，如下</p><p><img src="Untitled.png" alt="P0"></p><p>解决方法:</p><ol><li>明确依赖倒置原则（高层模块不依赖于底层模块，它们都依赖于抽象）</li></ol><p>2、进行架构隔离</p><ol><li><p>调用抽象层代码</p><p> <em><strong>应用层永远都调用抽象层，不能跨层调用</strong></em></p></li><li><p>符合依赖倒置原则</p><p> <em><strong>应用层不依赖于固件库，而是依赖于抽象层；驱动模块也按照抽象层的对下接口进行实现。</strong></em></p></li></ol><p><em><strong>3、最后实现更换芯片后，只需要修改驱动层，不需要修改应用层和HAL层</strong></em></p><p><img src="1.png" alt="P1"></p><h2 id="2、-软件基础设施"><a href="#2、-软件基础设施" class="headerlink" title="2、 软件基础设施"></a>2、 软件基础设施</h2><p><img src="2.png" alt="P2"></p><p>基础设施的内容：</p><p>1、基础类型和宏定义</p><p>2、操作系统</p><p>3、中间件（文件系统&#x2F;协议栈&#x2F;数据库等）</p><p>4、库（C库&#x2F; 数学库&#x2F;矩阵库&#x2F;容器库等）</p><p>5、框架（外设驱动框架&#x2F;设备框架&#x2F;状态机框架&#x2F;行为树框架）</p><p>6、工具支持（测试、调试、仿真等软件工具的支持）</p><p>使用统一的软件基础设施的好处</p><p>1、提升软件质量</p><p>2、提升软件复用性</p><p>3、减少软件冗余、避免重复造轮子</p><p>4、有利于团队技术积累</p><p>5、有利于团队的技术培养</p><p>6、是跨平台开发和测试驱动开发的前提</p><h2 id="3、合理识别和管理数据"><a href="#3、合理识别和管理数据" class="headerlink" title="3、合理识别和管理数据"></a>3、合理识别和管理数据</h2><h2 id="4、软件分解"><a href="#4、软件分解" class="headerlink" title="4、软件分解"></a>4、软件分解</h2><p>1、隔离硬件</p><p><img src="3.png" alt="P3"></p><p>这一步主要是将通信口的原始数据，通过硬件抽象层，转换为我们需要的数据（做到上层数据与硬件无关）</p><p>2、按是否实时域分解</p><p>何为实时？一般以响应时间10ms为分界线，见仁见智</p><p>3、按是否安全域分解</p><p>4、机器人的功能域分析</p><p><strong>感知</strong>                          传感器数据</p><p><strong>执行</strong>                      执行机构数据             车体数据                   指令数据</p><p><strong>认知决策</strong>                      任务数据                地图数据                 当前线路数据</p><p><strong>支持</strong>                           错误与警报历史数据                                   配置数据                      日志数据</p><p>5、按任务分解</p><p><img src="4.png" alt="P4"></p><h2 id="5、模块与接口定义"><a href="#5、模块与接口定义" class="headerlink" title="5、模块与接口定义"></a>5、模块与接口定义</h2><p>颗粒度：软件复用的关键！</p><p>软件分层的本质</p><p>接口定义的重要意义</p><p><img src="5.png" alt="P5"></p><h2 id="6、仿真、扩展与迭代"><a href="#6、仿真、扩展与迭代" class="headerlink" title="6、仿真、扩展与迭代"></a>6、仿真、扩展与迭代</h2><p>1、仿真</p><p><img src="6.png" alt="P6"></p><p><img src="Untitled-7.png" alt="P7"></p><blockquote><p><strong>拥有自己的嵌入式软件架构                                                                                                                 1.提升开发效率                                                                                                                                                    2.软件架构并非一日之功                                                                                                                        3.架构师不是最后的目标，是走向其他进阶职位的阶梯</strong></p></blockquote><p><a href="http://www.uml.org.cn/embeded/202109141.asp">嵌入式软件架构设计 模块化 &amp; 分层设计 -嵌入式 (uml.org.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/23/hello-world/"/>
      <url>/2023/05/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ hexo new <span class="hljs-string"><code class="language-hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

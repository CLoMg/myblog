<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于嵌入式Linux交叉编译的一些问题</title>
      <link href="/2023/06/09/guan-yu-qian-ru-shi-linux-jiao-cha-bian-yi-de-yi-xie-wen-ti/"/>
      <url>/2023/06/09/guan-yu-qian-ru-shi-linux-jiao-cha-bian-yi-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式交叉编译的流程"><a href="#嵌入式交叉编译的流程" class="headerlink" title="嵌入式交叉编译的流程"></a>嵌入式交叉编译的流程</h2><ol><li><p>预处理<br>xxx-gcc -E -o a.i a.c<br>a.c -&gt; a.i</p></li><li><p>编译<br>xxx-gcc -S -o a.s a.i<br>a.i -&gt; a.s</p></li><li><p>汇编<br>xxx-gcc -c -o a.o a.s<br>a.s -&gt; a.o  </p><p><em><strong>PS: -c 选项可以一次性完成1-3步，即 a.c -&gt; a.o</strong></em></p></li><li><p>链接<br>xxx-gcc -o a a.o xx.o<br>a.o + b.o + xx.o -&gt; a（可执行文件） </p><blockquote><p>.c : c文件</p><p>.i : 预处理文件</p><p>.s : 汇编文件</p><p>.o : 目标文件（二进制机器码）</p><p>最后生成的是可执行文件（二进制）</p></blockquote></li></ol><p><img src="/2023/06/09/guan-yu-qian-ru-shi-linux-jiao-cha-bian-yi-de-yi-xie-wen-ti/gcc%E7%BC%96%E8%AF%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="编译示意图" title="GCC编译示意图">  </p><p> 更多内容可参考 <a href="https://zhuanlan.zhihu.com/p/476697014">https://zhuanlan.zhihu.com/p/476697014</a></p><h2 id="库的作用"><a href="#库的作用" class="headerlink" title="库的作用"></a>库的作用</h2><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><h3 id="怎么使用库？"><a href="#怎么使用库？" class="headerlink" title="怎么使用库？"></a>怎么使用库？</h3><h3 id="链接过程中如何使用库？"><a href="#链接过程中如何使用库？" class="headerlink" title="链接过程中如何使用库？"></a>链接过程中如何使用库？</h3><h3 id="程序运行时如何使用库？"><a href="#程序运行时如何使用库？" class="headerlink" title="程序运行时如何使用库？"></a>程序运行时如何使用库？</h3><h3 id="多个库可以合成一个库吗？"><a href="#多个库可以合成一个库吗？" class="headerlink" title="多个库可以合成一个库吗？"></a>多个库可以合成一个库吗？</h3><h1 id="下一篇：关与I2C的一些问题"><a href="#下一篇：关与I2C的一些问题" class="headerlink" title="下一篇：关与I2C的一些问题"></a>下一篇：关与I2C的一些问题</h1><h1 id="下一篇：关于超声波测量风速风向的一些问题"><a href="#下一篇：关于超声波测量风速风向的一些问题" class="headerlink" title="下一篇：关于超声波测量风速风向的一些问题"></a>下一篇：关于超声波测量风速风向的一些问题</h1>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交叉编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/08/anemometer/"/>
      <url>/2023/06/08/anemometer/</url>
      
        <content type="html"><![CDATA[<h1 id="Ultrasonic-Anemometer-Design-and-Practice"><a href="#Ultrasonic-Anemometer-Design-and-Practice" class="headerlink" title="Ultrasonic Anemometer Design and Practice"></a>Ultrasonic Anemometer Design and Practice</h1><p>This documentation is dedicated to the design and tuning of the ultrasonic anemometer. </p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Anemometer is the most interesting sensor on QingStation.<br>However, it is also very challenging for me since I got almost no experience in analog circuit design,<br>while anemometer requires both analog amplifier and heavy data processing.<br>(I don’t even know how to use an operational amplifier at the beginning).</p><p>A very good blog I learnt from time to time is the <a href="https://www.dl1glh.de/ultrasonic-anemometer.html#advancement">Anemometer by Hardy Lau</a>.<br>This blog is very informative and already cover most of the knowledge needed to build your own ultrasonic anemometer. </p><p>The principle in short: when ultrasonic waves (pules) propagate in a flowing medium(air), the time that the waves reach the destination will be different.<br>The time difference in forward and backward propagation is reflecting the speed of the medium flow, i.e. the wind speed.<br>With 2 pairs of transducer placed perpendicular to each pair, the wind direction can also be calculated by using simple trigonometry.</p><p>The advantage of ultrasonic anemometer compared to other types:</p><ul><li>Ultrasonic anemometer is small compared to spinning type (cup anemometer).</li><li>Reasonable difficulty and cheap to DIY, also a good instruction available by Hardy. </li><li>It has NO MOVING PARTS! Moving parts are not very easy to DIY especially when waterproofing.</li></ul><h1 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h1><h2 id="Basic-principle"><a href="#Basic-principle" class="headerlink" title="Basic principle"></a>Basic principle</h2><p><img src="/figures/ultrasonic_anemometer_principle.png"></p><p>The principle is very simple, the sound wave that propagates in a medium (air) is affected by the movement of the medium.<br>By using the known propagating path and the time of propagation, we can calculate the speed of the medium. </p><p>In the above graph, we can see the travel of wind <em>BC</em> added to the sound propagation <em>AB</em> result in the travel path <em>AC</em>.</p><p><a href="https://www.dl1glh.de/ultrasonic-anemometer.html#advancement">Lau</a><br>has posted all related equations (with different notation). </p><p>In C language:</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs processing"><span class="hljs-built_in">alpha</span> = <span class="hljs-built_in">atan</span>(<span class="hljs-number">2</span>*H/D);<br>v = H/<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">alpha</span>)*<span class="hljs-built_in">cos</span>(<span class="hljs-built_in">alpha</span>)*(<span class="hljs-number">1</span>/t1 - <span class="hljs-number">1</span>/t2);<span class="hljs-comment">// wind speed</span><br>c = H/<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">alpha</span>)*(<span class="hljs-number">1</span>/t1 + <span class="hljs-number">1</span>/t2);           <span class="hljs-comment"><code class="language-hljs processing"><span class="hljs-built_in">alpha</span> = <span class="hljs-built_in">atan</span>(<span class="hljs-number">2</span>*H/D);<br>v = H/<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">alpha</span>)*<span class="hljs-built_in">cos</span>(<span class="hljs-built_in">alpha</span>)*(<span class="hljs-number">1</span>/t1 - <span class="hljs-number">1</span>/t2);<span class="hljs-comment">// wind speed</span><br>c = H/<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">alpha</span>)*(<span class="hljs-number">1</span>/t1 + <span class="hljs-number">1</span>/t2);           <span class="hljs-comment">// sound speed</span><br></code></pre></td></tr></table></figure><p>To measure the wind direction, use <code>arctan2</code> on 2 perpendicular pairs.  </p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs xl"><span class="hljs-function"><span class="hljs-title">beta</span> = atan2(NS, EW);  // north-&gt;</span><span class="hljs-function"><span class="hljs-title"><code class="language-hljs xl"><span class="hljs-function"><span class="hljs-title">beta</span> = atan2(NS, EW);  // north-&gt;</span><span class="hljs-function"><span class="hljs-title">south</span>, east-></span>west<br></code></pre></td></tr></table></figure><h2 id="Practical-issues-solution-and-compromise"><a href="#Practical-issues-solution-and-compromise" class="headerlink" title="Practical issues, solution and compromise"></a>Practical issues, solution and compromise</h2><p>In reality, things normally don’t work as we want, especially with analog circuits. </p><h3 id="Mechanical-design"><a href="#Mechanical-design" class="headerlink" title="Mechanical design"></a>Mechanical design</h3><h4 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h4><p>I use <a href="https://www.autodesk.com/products/fusion-360/overview">Fusion 360</a> to design the hardware and use my old crappy 3D printer to build them. </p><p>The transducers are placed at the top side and facing down.<br>The reflective plate just a flat surfaces.<br>Electronics and other sensors are located above the transducer in a shielded box. </p><p>I even managed to make an air flow simulation using <a href="https://www.simscale.com/">Simscale</a>.<br>The airflow speed is set to <code>30m/s</code> equivalent to <code>~58knots</code>, near a centre of a storm. </p><p><img src="/figures/QingStation-CDF.png" alt="QingStation-CDF"></p><p>As you can see, the airflow in between the top and the reflective plate is actually accelerated by <code>~3m/s</code>.<br>No idea if we need to take them into account in later processing.<br>I don’t have any access to a wind tunnel, so I could not do a test in a perfect experiment environment. </p><h4 id="Sound-path"><a href="#Sound-path" class="headerlink" title="Sound path"></a>Sound path</h4><p>As shown in the introduction, the sound beam should travel along the noted path.<br>But the reality is a different story.</p><ul><li>There is a direct sound propagate directly to the receiver transducer. </li><li>These sounds waves will mix together. </li><li>The 3D printed plastic is rigid and lightweight, perfect for amplifying a sound. The reflector might also be a speaker.</li></ul><p>The light-weight plastic is not a problem in Lau’s works because his anemometer is based on a metal frame. </p><p><img src="/figures/anemometer_multiple_sound_path.png" alt="anemometer_multiple_sound_path"></p><p>These sound beams can be seen in the receiving signals.<br>Adding some coins as a counterweight might help to reduce the magnitude of the other beams. </p><h3 id="Ultrasonic-transducer-driver"><a href="#Ultrasonic-transducer-driver" class="headerlink" title="Ultrasonic transducer, driver"></a>Ultrasonic transducer, driver</h3><p>Here is the schematic of the second version(PCB v1.1), details will be explained in the following sections.<br><img src="/figures/anemometer-sch.png"></p><p>A low-voltage 4052 analog switch controls which channel is selected as output and which is listening to the echo.<br>Excitations are generated by a timer’s PWM channel, while the echo output is amplified by op amps and measured by ADC. </p><h4 id="Transducers"><a href="#Transducers" class="headerlink" title="Transducers"></a>Transducers</h4><p>I brought a few different parts from taobao for testing, they are:</p><ul><li>A <code>40kHz</code> <code>10mm</code> waterproof(P&#x2F;N: EU10AIF40H07T&#x2F;R) </li><li>A <code>200kHz</code> <code>10mm</code> waterproof(P&#x2F;N: EU10PIF200H07T&#x2F;R)</li><li>A <code>40kHz</code> <code>16mm</code> waterproof (P&#x2F;N: NU40A16TR-1)</li><li>A few HC-SR04 type open-end transducer. None-waterproof.</li></ul><p>The first three with part number have similar parameters as below. </p><ul><li>Sound pressure <code>10V(0dB=0.02mPa) ≥106dB</code></li><li>Receive sensitive at <code>40KHz (0dB=V/ubar)：≥-75dB</code></li><li>Capacitive are all at a few <code>nF</code> depended on their diameter.</li></ul><p>I did not test the HC-SR04 because they are much larger than the <code>10mm</code> ones. </p><p>The final decision is the first one, <code>40kHz 10mm</code> waterproof transducer(P&#x2F;N: EU10AIF40H07T&#x2F;R).<br>The size of it is small, which helps to reduce the overall assembly size.<br>It is inexpensive compared to the <code>200kHz</code> version (4 times the cost).<br>High frequency can bring shorter pulses but those <code>40kHz</code> already good enough.<br>It has a wide-spreading directivity(less than <code>-3dB @ 30degree</code>), which means that I don’t need to fix it at an angle to the plate as Lau did.<br>Everything laying down flat simplifies the mechanical design and assembly process.</p><p>About frequency selection:</p><blockquote><p>Ideally, the pulses should as short as possible.<br>We normally send <code>3~4</code> pulses.</p><p><code>f=40k, λ=8.4mm</code> pulse width <code>33mm</code> </p><p><code>f=200k, λ=1.68mm</code> pulse width <code>6.72mm</code> </p><p>Both are smaller than the Height (<code>5cm</code>).<br>Shorter wavelength always better, however, the signal also degrade faster through propagation.<br>Also, higher frequencies have different requirements on the materials of the reflective plate. </p></blockquote><p>The only concern left is whether the signal pules is short enough<br>to avoid mix signal between the direct sound (we don’t want) and reflective sound, i.e. echo (we need). </p><p>I didn’t consider the muRata <code>MA40E8-2</code> which was used in Lau’s blog because the production was discontinued and it was more expensive anyway. </p><h4 id="Driver-design"><a href="#Driver-design" class="headerlink" title="Driver design"></a>Driver design</h4><p>Driver design is a tricky part. A lot of pains here. </p><p>For size and low-power consideration, I did not use a conventional MOSFET driver + transformer to drive the transducer.<br>Instead, like the old-style HC-SR04, I decided to use RS-232 interface drivers (such as MAX3232) to generate RS-232 levels<br>(<code>-5.5V</code> for <code>1</code> and <code>+5.5V</code> for <code>0</code>) square wave.<br>It should more or less provide at least <code>10Vpp</code> signal to drive the transducer.<br>Those 3V variances run on a 3V power supply so all the ICs and sensors can run on the single power rail. </p><p>These RS-232 chips have many alternatives, the driving capability is good enough for the transducers (a few <code>kohm</code> and a <code>few nF</code> in parallel).<br>The one used here is MAX3222, it provides a shutdown pin that can save power compared to more often used MAX3232.<br>These chips are low-cost and packed in a small MSOP package. </p><p>However, these chips introduced a huge interference issue from the driver side.</p><p>The MAX3222 drive the transducer through a <code>1uF</code> capacitor from one of its output channel.<br>On the receiver (transducer) side, a set of clamp diodes to the ground and resistors should ensure the signal won’t travel back to the driver side.<br>Also, another set of clamp diodes place in serial to the driver capacitor should block any noise that comes from the MAX3232. But it doesn’t.</p><p>Because the MAX3232&#x2F;3222 are generating negative and positive driving voltage based on the charge pump method,<br>it is impossible to get a smooth output voltage but can only decrease the frequency of switching by increasing those capacitors. </p><p>The signal on the driving capacitor looks like this:</p><p><img src="/figures/max3232_driver_noise.jpg"></p><p>Although after the clamp diodes, the noise is “negligible” even my oscilloscope cannot detect, but some things still pass there.<br>Which results in a distortion of the receiving wave.  </p><p>Here is the wave without connecting transducer, when connected, the noise will be lower but still exist.<br>The same channel means the driver (MAX3232) connected directly to the receiver.<br>Cross channel means from the other MAX3232 by power or other unknown sources.<br><img src="/figures/anemometer_noise.png"></p><p>The below image shows an actual signal distorted by the noise from the driver side.<br>The cross channel distortion is negligible, but the same channel distortion definitely affects the shape of the echo beam.<br>Notice that the signal shown here was collect before I glue the transducer to the frame so that the signal here have a larger amplitude.<br>When the transducers were glue to the frame, the distortion effect increased while the signal amplitude decreased.<br>This will leads to some trouble in measuring the arrival time.  </p><p><img src="/figures/anemometer_signal_distorsion.png"></p><p>I tried many methods including adding capacity to the MAX3232 charge-pump capacitors.<br>This helps to reduce the ripple frequency from <code>6.6kHz</code> to <code>~3kHz</code> but very little effect on reducing the amplitude of the ripple. </p><p>Later I found the trigger of the charging pump is very simple, once the voltage reaches a recharge threshold, it switches.<br>Very much like a DC&#x2F;DC converter with PDM mode, low-power, but higher noise. This kind of noise cannot be eliminated.</p><p>In the first PCB (v1.0), I cannot eliminate this noise with MAX3232 because both MAX3232’s powers are controlled by a single P-MOS.<br>I could not switch off one while still powering the other to drive the transducer.<br>So I designed a second PCB (v1.1) using MAX3222, which can be placed into a shutdown mode thus to stop the charge-pump,<br>while the channel is listening for the echo.<br>Hopefully, it can eliminate the issues. </p><h3 id="Echo-signal-and-amplifier"><a href="#Echo-signal-and-amplifier" class="headerlink" title="Echo signal and amplifier"></a>Echo signal and amplifier</h3><p>(I rarely touch analog circuit since forever, this definitely does not help with the designing and debugging)</p><p>When a transducer receives an echo, it generates a voltage between the two electrodes.<br>The signal first passes through a <code>4.7k</code> resistor then a <code>100nF</code> capacitor to block the DC signal.<br>Then, it passes through an analog switch (4052, Low Voltage version), before it finally reaches the amplifier. </p><p>Since we use a single rail power supply, the 4052 does not allow a negative voltage signal to pass.<br>Instead, we will charge each channel’s <code>100nF</code> capacitor to the virtual ground (<code>1/2 Vreff</code>)<br>before we start to send the pulses and collect measurement.<br>A small waiting, <code>5ms</code>, is needed when the channel switched for charging for stabilizing the voltage of the <code>100nF</code> cap.</p><h4 id="Amplifiers"><a href="#Amplifiers" class="headerlink" title="Amplifiers"></a>Amplifiers</h4><p>For the amplifier, I use the most common LMV358 dual op amp. </p><p>In PCB v1.0, only a single-stage amplifier is used to amplify the echo,<br>while the other one is used for generating a low impedance virtual ground. </p><p>The op amp was only set to <code>10x</code>, which I cannot even see the signal in my ADC data.<br>I overestimated the signal strength.<br>I tried to change the gain to <code>~200x</code> for a clearer signal.<br>However, the signal reading ranges is still too small (around <code>100 digits/pp</code> in a <code>12bit</code>, <code>4096</code> ADC). </p><p>Later, until I accidentally saw a tutorial on YouTube <a href="https://youtu.be/UooUGC7tNRg">Basics of Op Amp Gain Bandwidth Product and Slew Rate Limit</a><br>then I realized what was wrong here. The bandwidth of LMV358 (as well as all other op amps) list in the datasheet is “Unit Gain” also equal to “Gain–Bandwidth Product”<br>which does not cover the full frequency range.<br>LMV358 will only have around maximum <code>1MHz/40kHz = 25x</code> gain no matter how much I set.<br>What makes things worst is I added a <code>22pF</code> capacitor to the feedback loop for an RC filter which also decreases the gain.<br>The <code>22pF</code> is equal to <code>180kOhm</code> at <code>40kHz</code>.<br>Now I know why I could not see a signal at the beginning, the final bandwidth is too small filtered out all signals. </p><p>Unfortunately, by the time I learnt the GBP parameter, PCB V1.1 fabrication and assembly are already finished and on their long way to me.<br>In PCB v1.1, the 2 op amps are all used to amplify the echo.<br>The first stage was set to low input impedance, to help the signal to stable quicker when channel switch (charge the capacitor).<br>The 2 stages op amps also allow higher total gains while still let the <code>40KHz</code> signal pass.<br>The <code>22pF</code> was placed on the second stage op amp, which will need to desolder when the boards arrive.<br>The virtual ground is now provided by a voltage divider and a large capacitor.<br>The new circuit looks good at least in the simulation.<br>However, in this circuit, we still cannot test the <code>200KHz</code> transducer,<br>unless I change to a high bandwidth op amp and drop plenty of the LMV358 that I brought earlier.</p><h4 id="The-noise-from-the-driver"><a href="#The-noise-from-the-driver" class="headerlink" title="The noise from the driver"></a>The noise from the driver</h4><p>I think the small capacitor in the clamp diodes let the driver’s noise passed to the receiver side.<br>This is also approved in a simulation circuit built using EasyEDA.<br>With clean power, I can still see a small amplitude noise pass through.<br>The 1N4148 cannot block the noise from the driver side completely.<br>Hopefully, this will be fixed in PCB v1.1, where I changed the MAX3232 to MAX3222 to stop the charge pump. </p><h4 id="PCB-v1-1-Updates"><a href="#PCB-v1-1-Updates" class="headerlink" title="PCB v1.1 Updates"></a>PCB v1.1 Updates</h4><p>As for PCB v1.1, the above problem are eliminated by turning off the receiver side driver. The measurement is lying stably within a few digits during sampling. </p><h3 id="Signal-processing"><a href="#Signal-processing" class="headerlink" title="Signal processing"></a>Signal processing</h3><p><em>The code for signal processing can be found in the dedicated firmware repository.</em></p><h4 id="ADC-setting"><a href="#ADC-setting" class="headerlink" title="ADC setting"></a>ADC setting</h4><p>STM32L476’s ADC is very powerful, can reach <code>5Msps</code> sample rate.<br>Here I set the sample rate to <code>1MHz</code>. I did not configure it to higher because it is not necessary:</p><ul><li>LMV358 only have <code>1MHz</code> GBP.</li><li>Event <code>5Msps</code> does not bring significant improvement in resolution. </li><li>Sub resolution accuracy can be achieved by linear interpolation (details in signal processing section).</li></ul><p>At each burst, the ADC samples for <code>1ms</code>, which collects exactly <code>1000</code> samples. A DMA is used to unload the CPU.<br>As well as to ensure the sampling moment are not affected by other tasks.<br>It is enough for Height in the range of <code>4cm</code> to <code>10cm</code>.</p><p>When does the first echo arrive, and how long does the ADC need to sample?</p><blockquote><p>Assume that Height(H)&#x3D;<code>5cm</code>, Pitch(D)&#x3D;<code>4cm</code>, Sound speed(C)&#x3D;<code>336m/s</code></p><p>The distance that the sound travel is <code>S = sqrt((D/2)^2 + H^2) * 2 = 10.7cm</code>. </p><p>The first pulse arrives at around <code>t = 0.107 / 336 = 318us</code> after pulses sent when the wind is calm.<br>Even when H&#x3D;<code>10cm</code> t&#x3D;<code>588us</code>. <code>1000</code> samples is more than enough.</p></blockquote><p>The resolution of ADC is set to <code>12bit</code>, the maximum raw resolution without any hardware oversampling. </p><p>To ensure the time between pulses sent and ADC start is constant,<br>all CPU interrupts are halted using RT-Thread’s API between the start of excitation and the start of ADC sampling. </p><h4 id="Signal-preprocessing"><a href="#Signal-preprocessing" class="headerlink" title="Signal preprocessing"></a>Signal preprocessing</h4><p>The signal output from the amplifier stage has been biased to <code>1/2 Vreff</code>, where Vreff is equal to MCU’s Vdd <code>3.3V</code>.<br>So when there is no signal, the signal output should sit around <code>4095/2 = 2047.5</code>.</p><p>In the preprocessing stage, </p><ul><li>ADC samples are brought back to zero and converted to floating-point. </li><li>A bandpass filter. </li><li>Finally normalized to the maximum at <code>1</code>.</li></ul><p>Later I found out a digital bandpass filter can effectively reduce inference that causes by environmental inferences.<br>So I came back and add a digital filter to smooth out the signal. It helps to reduce the number of detecting faulty peaks.<br>A bandpass Butterworth is used here, with <code>2</code> bandwidths, <code>2kHz</code> or <code>10kHz</code> around <code>40kHz</code> carrier frequency. </p><p>The below image shows the <code>10</code> kHz BW filter passbands.<br>Any order over <code>4th</code> is already unstable with signal-precision float calculation. (The coefficients are converted to float32)<br>A <code>1st</code> order <code>10kHz</code> BW is used here for maximum stability. </p><p><img src="/figures/anemometer_digital_filter_response.png"></p><p>The current filter is IIR type, which I don’t really like to use here as the phase delay is playing a very important role in wind speed calculation.<br>Let’s see if we need to replace it with an FIR filter, which has a constant phase delay across all frequencies. </p><h4 id="Echo-pulse"><a href="#Echo-pulse" class="headerlink" title="Echo pulse"></a>Echo pulse</h4><p>In a non-coded excitation, the echo pulse is much longer than the excitation.</p><p>Here is the first echo recorded by my oscilloscope. The excitation length is <code>4</code> pulses. </p><p><img src="/figures/first_pulse_received.jpg"></p><p>You can see that there are plenty of pulses instead of <code>4</code> which we sent.<br>The envelope of the echo is a very beautiful diamond shape. We can use the shape to measure a rough propagating time.<br>Or we can simply use the maximum magnitude to measure it if the signal is not distorted as mentioned in driver sections. </p><p>In the practice, I tried a few different excitations, including barker-codes as suggested by Lau. </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs angelscript"><span class="hljs-comment">// single rate (40k)</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;50, 50, 50, 50&#125;;</span><br><br><span class="hljs-comment">// Double rate (80k), to control the +1 or −1 phase</span><br><span class="hljs-comment">// this is a bit tricky -- this is the only way to make it work.</span><br><span class="hljs-comment">// STM32&#x27;s timer seems to require the first cycle not to be 100% width.</span><br><span class="hljs-comment">// So there is a dummy &#x27;L&#x27; in each pulse, as well as a dummy &#x27;L&#x27; in each end if the end is not L.</span><br><span class="hljs-comment">// A +1 is &#x27;H, L&#x27;.  A -1 is &#x27;L, H&#x27;</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, H, L&#125;; // normal -&gt; ++++</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L, H, L&#125;; // normal suppressed -&gt; +++--</span><br><span class="hljs-built_in">uint16</span>_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L, H, L, H, L&#125;; <span class="hljs-comment">// extended suppressed -&gt; +++---</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, H, L, L, H, L, H, L&#125;; // normal suppressed 2 -&gt; ++++--</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, L, H, H, L&#125;; // barker-code 4.1 -&gt; ++-+</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, H, L, L, H, L, H, H, L, H, L&#125;; // long barker-code 4.1 -&gt; ++++--++</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L&#125;; // barker-code 4.2 -&gt; +++-</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L, H,  H, L, L, H, L&#125;; // barker-code 7 -&gt; +++--+-</span><br><span class="hljs-built_in">uint32</span>_t pulse_len = sizeof(pulse) / sizeof(<span class="hljs-built_in"><code class="language-hljs angelscript"><span class="hljs-comment">// single rate (40k)</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;50, 50, 50, 50&#125;;</span><br><br><span class="hljs-comment">// Double rate (80k), to control the +1 or −1 phase</span><br><span class="hljs-comment">// this is a bit tricky -- this is the only way to make it work.</span><br><span class="hljs-comment">// STM32&#x27;s timer seems to require the first cycle not to be 100% width.</span><br><span class="hljs-comment">// So there is a dummy &#x27;L&#x27; in each pulse, as well as a dummy &#x27;L&#x27; in each end if the end is not L.</span><br><span class="hljs-comment">// A +1 is &#x27;H, L&#x27;.  A -1 is &#x27;L, H&#x27;</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, H, L&#125;; // normal -&gt; ++++</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L, H, L&#125;; // normal suppressed -&gt; +++--</span><br><span class="hljs-built_in">uint16</span>_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L, H, L, H, L&#125;; <span class="hljs-comment">// extended suppressed -&gt; +++---</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, H, L, L, H, L, H, L&#125;; // normal suppressed 2 -&gt; ++++--</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, L, H, H, L&#125;; // barker-code 4.1 -&gt; ++-+</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, H, L, L, H, L, H, H, L, H, L&#125;; // long barker-code 4.1 -&gt; ++++--++</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L&#125;; // barker-code 4.2 -&gt; +++-</span><br><span class="hljs-comment">//uint16_t pulse[] = &#123;L, H, L, H, L, H, L, L, H, L, H,  H, L, L, H, L&#125;; // barker-code 7 -&gt; +++--+-</span><br><span class="hljs-built_in">uint32</span>_t pulse_len = sizeof(pulse) / sizeof(<span class="hljs-built_in">uint16</span>_t);<br></code></pre></td></tr></table></figure><p>The best result I can get is the <code>extended-suppressed</code> from the above list, which sends <code>3</code> positive pulses followed by <code>3</code> negative pulses.<br>This is also the barker-code 2 with modulation frequency at <code>13.3kHz</code>. Others do not help besides flattening the signals. </p><p>The reasons might be the limitation of drivers and transducers which does not allow higher modulation frequency. </p><p><img src="/figures/anemometer_excitation.png"></p><p>Update: 2021-05-13</p><p>The amplitude of the previous mentioned excitation is too low.<br>In a test with windspeed above <code>30mph</code>, it failed to capture the beam in most of the cases.<br>A new excitation is used here:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> H 98</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> P H,L</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N L,H</span><br><span class="hljs-type">const</span> <span class="hljs-type"><code class="language-hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> H 98</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> P H,L</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N L,H</span><br><span class="hljs-type">const</span> <span class="hljs-type">uint16_t</span> cpulse[] = &#123;P,P,P,P,P,P,N,N,N,N,P,P,N&#125;;<br></code></pre></td></tr></table></figure><p>This pattern have <code>6</code> positive phases to increase the amplitude to <code>1830~2270</code> (<code>440</code>) compared to original <code>1950~2150</code> (<code>200</code>)<br>Followed by some negative phases (act as a damping).</p><p><img src="/figures/anemometer_final_beam.png"></p><h4 id="Locating-the-echo-Peak-matching"><a href="#Locating-the-echo-Peak-matching" class="headerlink" title="Locating the echo - Peak matching"></a>Locating the echo - Peak matching</h4><p>We need to measure the time of the sound beam propagating through the path.<br>So that we need to recognize the beam in some ways and measure the time <code>dt</code> it within the measurement. </p><p>Here, the <code>dt</code> is measure in 2 steps. </p><ul><li>Peak Matching - measure a rough position of the beam, accuracy is half period, <code>12.5us</code>. </li><li>Zero-Crossing - improve the accuracy to sub-digit (<code>&lt;1us</code>)</li></ul><p>The method I implemented first is called <strong>Peak Matching</strong>.<br>First, we locate the maximum value as the main peak of the beam.<br>Then we detect the turning point of a few peaks before and after the main peak.<br>We store both positive peak and negative peaks (valleys) with their indexes and values. </p><p>In the searching stage, we slide the newly measured peaks with previously collected reference peaks (calibration) and do a set of Mean Square Error (MSE) based on each peak difference.<br>Then we can use the minimum MSE to match the offset if there is any.<br>The search range is <code>9</code> or <code>+-4</code>; as we also count the valleys, the actual ranges is <code>2</code> peaks before the maximum and <code>2</code> peaks after the maximum.</p><p>As you might notice, we only capture a few peaks around the main peak which is the maximum.<br>But sometimes the maximum might not be the main peak due to environmental noise or turbulences.<br>So simply capture the maximum peak to locate the beam does not work. </p><p>The accuracy of matching the signal can be as high as the resolution of time in the ADC sampling period, i.e. <code>~1us @ 1Msps</code>.</p><p>This is by now the most unstable part because the inference from the driver affects the detection of the echo.<br>Result in sometimes this method will fail and the detection offset by one period, <code>25us</code>. </p><p>Here show some (<code>50</code>) ‘faulty’ signals; these ADC measurements are recorded during the calm wind but are fail to calculate (they looks good though).<br>The maximum peak of the signals is marked.<br>You can see there are misaligned peaks even in a perfect calm wind. </p><p><img src="/figures/anemometer_misaligned_peaks.svg"></p><p>In practice, there are around <code>1</code> in <code>50</code> misaligned peak measurement in my silence, calm living room and <code>1</code> in <code>5</code> while next to the TV.<br>After the MSE peak matching, most of them can be corrected and can still provide good windspeed. In a 12 hour measurement, ‘only’ <code>340</code> in <code>43200</code>, <code>0.7%</code> error rate.<br>But this is not the end, a further correction is to use the sound speed calculated from the <code>dt</code>.<br>If the sound speed is hugely different from the sound speed estimated from temperature, then this <code>dt</code> measurement must be wrong.<br>Once a error detected, we make another measurement immediately.  </p><h4 id="Zero-Crossing-detection-and-interpolation"><a href="#Zero-Crossing-detection-and-interpolation" class="headerlink" title="Zero-Crossing detection and interpolation"></a>Zero-Crossing detection and interpolation</h4><p>To further improve the resolution to sub digit of ADC sampling period, i.e. <code>&lt;1us</code>,<br>we can use an interpolated zero-crossing to utilized both sampling moments and the ADC measurement values.<br>This method is also suggested by <a href="https://www.dl1glh.de/ultrasonic-anemometer.html#advancement">Lau’s blog</a>. </p><p>The resolution of zero-crossing can be extremely high. Below are a few hundred ADC raw measurements.<br>You can see that in around zero, the signal looks like a linear function, with a slope rate at around <code>30</code>.<br>This means in this particular scenarios, after the interpolation, we can produce the resolution <code>30</code> times smaller than the original <code>1us</code>, i.e. <code>33ns</code>.<br>A steeper slope will bring better resolution, but the accuracy also depends on the signal distribution.  </p><p><img src="/figures/anemometer_zero_point.png"></p><p>This method requires a stable zeroing of the raw signal which performed in the first step, preprocessing.<br>These offset for each channel were calibrated during the power-up, by measuring and averaging the signal without sending excitation.<br>It takes around <code>1</code> second.<br>Zeroing can also perform during the operation, every hour or every <code>1 degC</code> temperature changes to maximize the accuracy. </p><p>Because all <code>4</code> channels shared the same amplifier, they also share the minor bias if there is any so that will be cancelled out.<br>The actual zero offsets of each channel are all at around <code>2046~2047</code>, very stable and accurate.<br>But occasionally, there is some offset in one or all channels as the figure shows below. The east and west channel drifted up.<br>This measurement was dumped by the fault detection.(The west also deformed quite much).</p><p><img src="/figures/anemometer_zero_offset_example.png"></p><p>In the starting up, we can collect a set of zero-crossing for calm wind calibration.<br>In the later measurement, to avoid the above offset issues, we use a dynamic zeroing method.<br>Before each measurement start,<br>we perform an ADC measurement without excitation to get the real-time zero to eliminate the offset from power sources or others.  </p><p>For each channel, we interpolate <code>6</code> zero-crossing points around the maximum amplitude of each echo.<br>As the waves around peaks are the most identical.<br>These zero crossings are averaged and produce one number, which represents the location of these crossing.<br>There is no need to compare all the zero-crossing moment as I found out their averages are very stable. </p><p>These result in a pretty stable sub-digit accuracy, at least in calm wind.<br>A simple test result shows the raw measurements in a standard error at <code>0.037us</code>, already very close to the theoretic resolution we calculate. (equivalent to <code>0.051m/s</code>).<br>Better accuracy can be achieved by averaging a few measurements.<br>Measurement rate and oversampling can be set through the configuration file same as others.<br>This level of accuracy that simple processing can provide is already very promising!</p><p>The first wind speed measurement in the north-south direction is shown below.</p><p><img src="/figures/first_windspeed_measurement.png"></p><p>Update: 2021-05-13</p><p>The start up ADC zeroing is not needed now.<br>Instead of sampling directly, I add ADC sample without excitation that run every timebefore sampling.<br>So we can have a dynamic zeroing right before the actual measuring phase.<br>Therefore, the offset by temperatures or power can be minimized. </p><h4 id="Pulse-compression"><a href="#Pulse-compression" class="headerlink" title="Pulse compression"></a>Pulse compression</h4><p>Pulse compression is very commonly implemented in radar systems, Lau’s works are also using it but I am not sure how he uses it.<br>If the <em>peak matching</em> stability is not enough. I will try to implement a coded excitation using barker-code. </p><p>It is fairly straight forward to perform a matched filter (pulse compression).<br>But it requires much more CPU time since it is basically a signal correlation (same as a convolution in machine learning).<br>If it is needed, quantisation to <code>8/16bit</code> fixed-point then use Neural Network acceleration core will help the speed.</p><p>In a rough test, for bark-code 4.1 <code>+++-</code>, the MCU took <code>46ms</code> to compute all <code>4</code> channels (correlation of <code>100 x 1000</code>).<br>The load is ok, but compared to the <em>peak matching</em> method, which only takes <code>6ms</code>, it is still taking too much time.<br>I didn’t test a full correlation between 2 channels, e.g. North vs. South,<br>which will lead to <code>1000*1000</code> maximum, <code>10</code> times the complexity of the trial.<br>Of course, it is not necessary to make the full correlation, I did test a <code>300 x 300</code> windows for both signals.<br>It takes around <code>40ms</code> per pair of channels. </p><p>I am not sure what is wrong that the side sidelobes are still quite large after the correlation. Not better than the raw signal.<br>The inverted signal (-) only degrade the peak a little bit, which should be suppressed or inverted. </p><ul><li>The modulation frequency is too high that the transducer cannot handle. I tried <code>40kHz</code> and <code>20kHz</code>, not much different. </li><li>Or the way I process is wrong.</li></ul><p>The major difference between Lau’s transducer and my transducer is the packaging materials.<br>The one I used is aluminium while the one he uses is plastic.<br>Another potential issue is the driving voltage, my one only have <code>10.5Vpp</code> but Lau’s is higher through a transformer(unknown).  </p><p>Maybe just leave it by now. </p><p>Update: 2020-05-13</p><p>After checking many literatures, I found that it is very difficult to modulate the excitation in high frequency.<br>The inertial of transducers delay the phase shifting at least <code>4</code> or more cycles depended on the amplitudes.<br>I only sussess to code the phase in a <code>10kHz</code> (every <code>4</code> cycles in carrier frequency (<code>40kHz</code>)).<br>But the signal is too small to stand in a high winds. </p><p>It was very frastrating to try and fail.<br>During the time, I have a few email communication with Lau’s.<br>And thanks for his emails to further explain his setup, I finally understand what was wrong.<br>His anemometer has significant more driving capability than the one I built.<br>And his transducers has a plastic shell which does have less inertial than the aluminium once I have. </p><h4 id="Extracting-wind-speed-and-sound-speed"><a href="#Extracting-wind-speed-and-sound-speed" class="headerlink" title="Extracting wind speed and sound speed"></a>Extracting wind speed and sound speed</h4><p>Finally, we have stable <code>4</code> channels of <code>dt</code> measurement ready, together with the mechanical parameters (height and pitch),<br>we can calculate the windspeed using the equations that<br><a href="https://www.dl1glh.de/ultrasonic-anemometer.html#advancement">Lau</a> provided. </p><p>The wind direction can also be inferred from the perpendicular pairs.</p><p>Besides, we can also extract the current sound speed directly instead of estimating it from atmospheric pressure and temperature. </p><p>Or in C language</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs awk"><span class="hljs-regexp">//</span> wind speed.<br>ns_v = height <span class="hljs-regexp">/ (sin_a * cos_a) * (1.0f/</span>dt[NORTH] - <span class="hljs-number">1.0</span>f/dt[SOUTH]);<br>ew_v = height <span class="hljs-regexp">/ (sin_a * cos_a) * (1.0f/</span>dt[EAST] - <span class="hljs-number">1.0</span>f/dt[WEST]);<br>v = sqrtf(ns_v*ns_v + ew_v*ew_v);<br><br><span class="hljs-regexp">//</span> sound speed<br>ns_c = height <span class="hljs-regexp">/ sin_a * (1.0f/</span>dt[NORTH] + <span class="hljs-number">1.0</span>f/dt[SOUTH]);<br>ew_c = height <span class="hljs-regexp">/ sin_a * (1.0f/</span>dt[EAST] + <span class="hljs-number">1.0</span>f/dt[WEST]);<br>c = (ns_c + ew_c)/<span class="hljs-number">2</span>;<br><br><span class="hljs-regexp">//</span> course<br>course = atan2f(-ew_v, -ns_v)/<span class="hljs-number">3.1415926</span>*<span class="hljs-number">180</span> + <span class="hljs-number"><code class="language-hljs awk"><span class="hljs-regexp">//</span> wind speed.<br>ns_v = height <span class="hljs-regexp">/ (sin_a * cos_a) * (1.0f/</span>dt[NORTH] - <span class="hljs-number">1.0</span>f/dt[SOUTH]);<br>ew_v = height <span class="hljs-regexp">/ (sin_a * cos_a) * (1.0f/</span>dt[EAST] - <span class="hljs-number">1.0</span>f/dt[WEST]);<br>v = sqrtf(ns_v*ns_v + ew_v*ew_v);<br><br><span class="hljs-regexp">//</span> sound speed<br>ns_c = height <span class="hljs-regexp">/ sin_a * (1.0f/</span>dt[NORTH] + <span class="hljs-number">1.0</span>f/dt[SOUTH]);<br>ew_c = height <span class="hljs-regexp">/ sin_a * (1.0f/</span>dt[EAST] + <span class="hljs-number">1.0</span>f/dt[WEST]);<br>c = (ns_c + ew_c)/<span class="hljs-number">2</span>;<br><br><span class="hljs-regexp">//</span> course<br>course = atan2f(-ew_v, -ns_v)/<span class="hljs-number">3.1415926</span>*<span class="hljs-number">180</span> + <span class="hljs-number">180</span>; <br></code></pre></td></tr></table></figure><p>An overnight calm wind measurement shows the measurement and temperature estimation are quite matching.<br>The temperature range for the below measurement is <code>20.4DegC</code> to <code>25.6DegC</code>.</p><p><img src="/figures/anemometer_speed_of_sound.png"></p><h4 id="Fault-detection-and-correction"><a href="#Fault-detection-and-correction" class="headerlink" title="Fault detection and correction"></a>Fault detection and correction</h4><p>There are many interference sources from both environmental noise or other onboard electronics.<br>Sometimes cause the deform of the signal as I already mentioned in the previous sections.<br>There are indeed other hidden sources that I could not find. </p><p>Due to the low-power requirement, I did not implement any filter to detect the final results based on previous measurements.<br>Because the difference in wind speed can be huge if the device needs to sleep for as long as <code>30</code> seconds.</p><p><strong>Misaligned Beam</strong></p><p>In the case of misaligned beam detection, I mentioned in <em>peak matching</em>,<br>I also calculate the history of MSE error and it is updated at a small rate at every MSE calculation.<br>A hard threshold is added to the history MSE to set a final MSE threshold.<br>This method effectively filters out around <code>9/10</code> of the misaligned cases which cannot be recovered by a simple minimum MSE.<br>A demo is shown below. A dynamic MSE and final threshold. </p><p><img src="/figures/anemometer_mse_threshold.png"></p><p><strong>Sound speed safeguard</strong></p><p>There is a final safeguard that can be used to detect the errors, that is, the sound speed calculated from the <code>dt</code>.<br>The sound speed measurement is pretty stable and can be estimated from the temperature measured by other sensors.<br>The difference between wind speed estimated by temperature and estimated by <code>dt</code> is normally smaller than <code>2&lt;m/s</code>.<br>The difference threshold is set to <code>5m/s</code>.</p><p>If any of the above error is detected in any channel, the current measurement will be dropped and a new measurement will be performed immediately. </p><h4 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h4><p>To help to debug, once a fault detected, the <code>4</code> channels ADC measurement will be recorded into SD card.<br>Actually, most of the faulty figures shown in the above sections are plotted from those dumping data. </p><p>I also wrote some Python scripts to post-process the data or and some Processing3 scripts to show real-time data.<br>They are extremely helpful. Here is a screen recording of the Processing3 scripts plotting <code>4</code> channels of real-time data. </p><p><img src="/figures/anemometer_processing3_demo.gif"></p><p>Overall, I would like to repeat what Lau has said in his blog “building the anemometer is definitely not as easy as I thought.” </p><h4 id="Timing"><a href="#Timing" class="headerlink" title="Timing"></a>Timing</h4><p>For each channel, the measurement will start with switching analog signals paths and enable the dedicated driver.<br>Then we wait for <code>4ms</code>  to let the signal path stable and let the driver charges to its boosting voltage (<code>&lt;150us</code>).</p><p>We perform an <code>idle</code> measurement (no excitation) to get the zero of ADC measurement, which takes <code>1ms</code>.  </p><p>Then the coded pulses are sent to Timer via a DMA channel to generate ultrasonic waves.<br>At the same time, the timer also triggers the ADC to start sampling.<br>Another DMA channel is responsible to collect all measurement.<br>This takes another <code>1ms</code> to finish.  </p><p>In total, sampling all channels take <code>~25ms</code>.</p><p>Once all <code>4</code> channels of data are ready, then all data processings mentioned in the above sections are performed.<br>The whole processing takes <code>19</code>ms. So, each measurement takes <code>19+25=44ms</code>.</p><p>The measurement and processing time is shorter than I expected.<br>Thanks to the <em>peak matching</em> method which is relatively less computational expensive compared to the correlation method. </p><p>Overall, I really satisfied with the processing time as less than <code>50ms</code> allowing the MCU and analog circuit to sleep more to save power.<br>It also left more space once a fault is detected, we still have plenty of time to take a few more samples to achieve a correct measurement.<br>Or, when power consumption is not a case, can oversampling up to <code>20</code> times in a second for better accuracy. </p><h4 id="Processing-summary"><a href="#Processing-summary" class="headerlink" title="Processing summary"></a>Processing summary</h4><p><img src="/figures/anemometer_windspeed_measurement.png"></p><p>By using the above processing, the Anemometer can now produce a quite stable measurement.<br>The above <code>1</code> hour measurement was done in one of the windy, sunny afternoon without a single none recoverable fault.</p><p>The major difficulties are:</p><ul><li>Selecting and generating a good pulse. </li><li>Locating the beam is difficult in both calibration and real-time measurement. </li><li>Fault detection. Decide when to fixed a signal and when to redo the measurement.</li></ul><p>These parts are where most of my effort was put into. </p><p>But once the process was finalised, the single firmware worked easily in all <code>4</code> different hardware I built. </p><h3 id="Keep-out-zone"><a href="#Keep-out-zone" class="headerlink" title="Keep out zone"></a>Keep out zone</h3><p>During the development, I found any object if existed in this zone will affect the shape of the sound beam,<br>therefore affect or fail the windspeed measurement.</p><ul><li>Objects in Zone 1 will fail all measurement.</li><li>Objects in Zone 2 will fail calibrations, but the above algorithm can still produce stable measurement.</li></ul><p><img src="/figures/anemometer_keep_out_zone.png"></p><p>It is likely that when a bird sit on the reflective plate fail the measurement completely. </p><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><h3 id="Car-test"><a href="#Car-test" class="headerlink" title="Car test"></a>Car test</h3><p>I brought a <code>88mm</code> magnet car roof mount to mount the QingStation on the roof of the car.<br>I used a few 3D printed parts and a <code>38 x 2.2CM</code> PVC tube to raise it up a little bit.<br>So the air flow compressed the car won’t affect too much.<br>The actual height from the car roof to the top of QingStation is <code>55CM</code>.<br>The car is <code>1410mm</code> height, so the total height is just less than <code>2m</code>. </p><p>First test:<br><img src="/figures/anemometer_car_experiment2.jpg"></p><p>Second test:<br><img src="/figures/anemometer_car_experiment1.jpg"></p><p>Comparison of GNSS speed and Windspeed measurement.</p><p><img src="/figures/anemometer_gnss_vs_wind.png"></p><p>The windspeed measurement is higher than the GNSS speed. </p><ul><li>It might because the location is still in the compressed bubble of the car, where the air speed is being compressed and increased.</li><li>Or it might be something wrong with the calculation. </li><li>Or it might be the air flow from the car ahead of me.</li><li>Or wind.</li></ul><p>Here is the windspeed measurement and <code>30sec</code> average. A <code>30sec</code> average makes more sense.</p><p><img src="/figures/anemometer_car_windspeed.png"></p><p>Most of the time, we just stopped by 5 or 6 passing trains in the middle of the road. Fortunately, we were the first car in the queue so I do enjoy the time watching them. </p><p><img src="/figures/anemometer_car_experiment3.jpg" alt="anemometer_car_experiment3"></p><h3 id="Motorway-test"><a href="#Motorway-test" class="headerlink" title="Motorway test"></a>Motorway test</h3><p>I printed a much shorter stick to lower the center of gravity.<br>The plan was to test the anemometer in a high wind speed, because it was never done.</p><p>I only have the rain sensor lens attached to the vented top, so I install that one.<br>And… it didn’t take long to reach a heavy rain. </p><p>Unfortunately, the SD card failed at the very beginning hitting the rain.<br>The QingStation kept sending MQTT messages for another hour in the heavy rain until we reached the destination (Durdle Door).</p><ul><li>The Anemometer failed after <code>~30min</code> in the rain. </li><li>All digital sensors down when the circuit was wet. </li><li>The Barometer failed for a few minutes then came back up.</li><li>The Battery voltage dropped dramatically to <code>3.1V</code> for some minutes when the connector got wet. </li><li>RTC clock stopped (crystal got wet).<br>Not sure if there are electrochemical reaction or the ADC pins got wet (maybe that is also the reason that Anemometer failed.). </li><li>The SD card has a few random files&#x2F;folders written. Data files are all fine but logging files are wrong. </li><li>Logging was failed and the MQTT messages are not saved so I have no idea what was wrong.</li></ul><p>Once everything is dry, they are all back and working well. </p><p><img src="/figures/anemometer_motorway_rain.png" alt="anemometer_motorway_rain"></p><p>The log shows perfect tracking of windspeed below <code>~72km/h</code> (<code>20m/s</code>), but it started to fail sometime at <code>108km/h</code> (<code>30m/s</code>).<br>This is also shown in the error codes (not listed). Anemometer started to struggle a bit at high speed (<code>30m/s</code>), reporting errors almost every <code>3</code> sec. But it still can provide a good measurement within <code>1</code> second recording period. But there were <code>3</code> failures that report even <code>200km/h</code>. </p><p>I think the results are acceptable, since <code>&gt;20m/s</code> wind doesn’t occur all the time. </p><p>Due to the mounting point is lower, the air acceleration effect is larger than the previous low speed test. I think it is in a normal range. But since I don’t have access to wind tunnel to calibrate the sensor. There is not much I can do. </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux wifi connect</title>
      <link href="/2023/06/07/linux-wifi-connect/"/>
      <url>/2023/06/07/linux-wifi-connect/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-wifi-连接"><a href="#Linux-wifi-连接" class="headerlink" title="Linux wifi 连接"></a>Linux wifi 连接</h1><h2 id="wifi-开启-x2F-关闭"><a href="#wifi-开启-x2F-关闭" class="headerlink" title="wifi 开启&#x2F;关闭"></a>wifi 开启&#x2F;关闭</h2><ol><li>ifconfig -a &#x2F;&#x2F;查看网络设备</li><li>ifconfig wlan0 up  &#x2F;&#x2F;开启wifi<br>中间启动失败的问题，经查看日志，发现wifi驱动的 .bin 文件无法打开，将对应版本文件copy到文件夹中，即可正常打开</li></ol><h2 id="wifi-搜索"><a href="#wifi-搜索" class="headerlink" title="wifi 搜索"></a>wifi 搜索</h2><ol><li>iw wlan0 scan |grep SSID  &#x2F;&#x2F;搜索wifi热点，并显示SSID</li></ol><h2 id="wifi配置"><a href="#wifi配置" class="headerlink" title="wifi配置"></a>wifi配置</h2><ol><li>wpa_passphrase [SSID] [KEYS] &gt;&gt; &#x2F;etc&#x2F;wpa_supplicant.conf &#x2F;&#x2F; 将wifi信息写入配置文件</li><li>wpa_supplicant -B -i wlan0 -c &#x2F;etc&#x2F;wpa_supplicant.conf &#x2F;&#x2F;启动应用 [-B 后台运行] [-i 接口名称] [-c 配置文件][-D 驱动程序名称]</li><li>iw dev wlan0 link &#x2F;&#x2F;回复wifi连接状态</li><li>udhcpc &#x2F;&#x2F;自动获取ip</li><li>ifconfig wlan0 [ip] &#x2F;&#x2F;自动获取ip失败后，可手动配置</li></ol><h2 id="wifi连接后，无法ping通外网"><a href="#wifi连接后，无法ping通外网" class="headerlink" title="wifi连接后，无法ping通外网"></a>wifi连接后，无法ping通外网</h2><ol><li>可能是网关未设置<br>route  &#x2F;&#x2F;列出路由信息</li><li>route add default gw [gw_addr] &#x2F;&#x2F;配置网关地址</li></ol><h2 id="关于wpa-supplicant-WIFI工具"><a href="#关于wpa-supplicant-WIFI工具" class="headerlink" title="关于wpa_supplicant(WIFI工具)"></a>关于wpa_supplicant(WIFI工具)</h2><p>wpa_supplicant是一个连接、配置WIFI的工具，它主要包含wpa_supplicant与wpa_cli两个程序,pa_supplicant是核心程序，它和wpa_cli的关系就是服务和客户端的关系：后台运行wpa_supplicant，<br>使用wpa_cli来搜索、设置、和连接网络.</p><ol><li><p>启动wpa_supplicant应用:<br> wpa_supplicant -Dnl80211  -c &#x2F;etc&#x2F;wpa_supplicant.conf -i wlan0  -B<br>-D 驱动程序名称（指定WiFi驱动程序：nl80211，wext）<br>-i 接口名称<br>-c 配置文件　<br>-B 在后台运行守护进程<br>-d &#x3D; increase debugging verbosity (-dd even more)<br>不支持82011用法：<br>wpa_supplicant -D wext -c &#x2F;etc&#x2F;wpa_supplicant.conf -i wlan0 &amp;</p></li><li><p>启动wpa_cli<br>wpa_cli -i wlan0 scan         　&#x2F;&#x2F;搜索附件wifi热点<br>wpa_cli -i wlan0 scan_result 　 &#x2F;&#x2F;显示搜索wifi热点<br>wpa_cli -i wlan0 status        &#x2F;&#x2F;当前WPA&#x2F;EAPOL&#x2F;EAP通讯状态<br>wpa_cli -i wlan0 ping          &#x2F;&#x2F;pings wpa_supplicant</p></li><li><p>添加新的连接<br>wpa_cli -i wlan0 add_network   &#x2F;&#x2F;添加一个网络连接,会返回<network id><br>wpa_cli set_network <network id>  ssid ‘“name”‘  &#x2F;&#x2F;ssid名称<br>wpa_cli set_network <network id>  psk ‘“psk”’　　&#x2F;&#x2F;密码<br>wpa_cli set_network <network id>  scan_ssid 1<br>wpa_cli set_network <network id>  priority  1   &#x2F;&#x2F;优先级</p></li><li><p>保存连接<br>wpa_cli -i wlan0 save_config   &#x2F;&#x2F;信息保存到默认的配置文件中</p></li><li><p>连接已有连接<br>wpa_cli -i wlan0 list_network  &#x2F;&#x2F;列举保存过得连接<br>wpa_cli -i wlan0 select_network  <network id>  &#x2F;&#x2F;连接指定的ssid </p></li><li><p>save_config之后的wpa_supplicant.conf文件示例:<br>ctrl_interface&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant&#x2F;<br>ap_scan&#x3D;1<br>network&#x3D;{<br> scan_ssid&#x3D;1<br> ssid&#x3D;”xxxx”<br> psk&#x3D;”xxxx”<br> priority&#x3D;2 &#x2F;&#x2F;wifi连接优先级<br>}</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wifi </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Embeded-Software-Architecture</title>
      <link href="/2023/05/25/embeded-software-architecture/"/>
      <url>/2023/05/25/embeded-software-architecture/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌入式软件架构"><a href="#嵌入式软件架构" class="headerlink" title="嵌入式软件架构"></a>嵌入式软件架构</h1><h2 id="嵌入式软件架构的六个步骤"><a href="#嵌入式软件架构的六个步骤" class="headerlink" title="嵌入式软件架构的六个步骤"></a>嵌入式软件架构的六个步骤</h2><h3 id="1-架构抽象层"><a href="#1-架构抽象层" class="headerlink" title="1. 架构抽象层"></a>1. 架构抽象层</h3><p>抽象层是嵌入式软件架构中最重要的一个步骤。它提供了一个关注点分离的方法，将底层硬件和顶层应用程序隔离开来。这种隔离使得应用程序更易于编写和维护，同时也使得底层硬件更易于更换和升级。此外，抽象层还能够提高软件的可移植性和可重用性，因为它使得软件更易于在不同的硬件平台上运行。</p><p>反思：目前自己写的代码，有很多直接在应用层调用底层代码，耦合程度严重，不符合依赖倒置原则，更换芯片后移植也困难，如下</p><p><img src="/2023/05/25/embeded-software-architecture/Untitled.png" alt="P0"></p><p>解决方法:</p><ol><li>明确依赖倒置原则（高层模块不依赖于底层模块，它们都依赖于抽象）</li></ol><p>2、进行架构隔离</p><ol><li><p>调用抽象层代码</p><p> <em><strong>应用层永远都调用抽象层，不能跨层调用</strong></em></p></li><li><p>符合依赖倒置原则</p><p> <em><strong>应用层不依赖于固件库，而是依赖于抽象层；驱动模块也按照抽象层的对下接口进行实现。</strong></em></p></li></ol><p><em><strong>3、最后实现更换芯片后，只需要修改驱动层，不需要修改应用层和HAL层</strong></em></p><p><img src="/2023/05/25/embeded-software-architecture/1.png" alt="P1"></p><h2 id="2、-软件基础设施"><a href="#2、-软件基础设施" class="headerlink" title="2、 软件基础设施"></a>2、 软件基础设施</h2><p><img src="/2023/05/25/embeded-software-architecture/2.png" alt="P2"></p><p>基础设施的内容：</p><p>1、基础类型和宏定义</p><p>2、操作系统</p><p>3、中间件（文件系统&#x2F;协议栈&#x2F;数据库等）</p><p>4、库（C库&#x2F; 数学库&#x2F;矩阵库&#x2F;容器库等）</p><p>5、框架（外设驱动框架&#x2F;设备框架&#x2F;状态机框架&#x2F;行为树框架）</p><p>6、工具支持（测试、调试、仿真等软件工具的支持）</p><p>使用统一的软件基础设施的好处</p><p>1、提升软件质量</p><p>2、提升软件复用性</p><p>3、减少软件冗余、避免重复造轮子</p><p>4、有利于团队技术积累</p><p>5、有利于团队的技术培养</p><p>6、是跨平台开发和测试驱动开发的前提</p><h2 id="3、合理识别和管理数据"><a href="#3、合理识别和管理数据" class="headerlink" title="3、合理识别和管理数据"></a>3、合理识别和管理数据</h2><h2 id="4、软件分解"><a href="#4、软件分解" class="headerlink" title="4、软件分解"></a>4、软件分解</h2><p>1、隔离硬件</p><p><img src="/2023/05/25/embeded-software-architecture/3.png" alt="P3"></p><p>这一步主要是将通信口的原始数据，通过硬件抽象层，转换为我们需要的数据（做到上层数据与硬件无关）</p><p>2、按是否实时域分解</p><p>何为实时？一般以响应时间10ms为分界线，见仁见智</p><p>3、按是否安全域分解</p><p>4、机器人的功能域分析</p><p><strong>感知</strong>                          传感器数据</p><p><strong>执行</strong>                      执行机构数据             车体数据                   指令数据</p><p><strong>认知决策</strong>                      任务数据                地图数据                 当前线路数据</p><p><strong>支持</strong>                           错误与警报历史数据                                   配置数据                      日志数据</p><p>5、按任务分解</p><p><img src="/2023/05/25/embeded-software-architecture/4.png" alt="P4"></p><h2 id="5、模块与接口定义"><a href="#5、模块与接口定义" class="headerlink" title="5、模块与接口定义"></a>5、模块与接口定义</h2><p>颗粒度：软件复用的关键！</p><p>软件分层的本质</p><p>接口定义的重要意义</p><p><img src="/2023/05/25/embeded-software-architecture/5.png" alt="P5"></p><h2 id="6、仿真、扩展与迭代"><a href="#6、仿真、扩展与迭代" class="headerlink" title="6、仿真、扩展与迭代"></a>6、仿真、扩展与迭代</h2><p>1、仿真</p><p><img src="/2023/05/25/embeded-software-architecture/6.png" alt="P6"></p><p><img src="/2023/05/25/embeded-software-architecture/Untitled-7.png" alt="P7"></p><blockquote><p><strong>拥有自己的嵌入式软件架构                                                                                                                 1.提升开发效率                                                                                                                                                    2.软件架构并非一日之功                                                                                                                        3.架构师不是最后的目标，是走向其他进阶职位的阶梯</strong></p></blockquote><p><a href="http://www.uml.org.cn/embeded/202109141.asp">嵌入式软件架构设计 模块化 &amp; 分层设计 -嵌入式 (uml.org.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/23/hello-world/"/>
      <url>/2023/05/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ hexo new <span class="hljs-string"><code class="language-hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
